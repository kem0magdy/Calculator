
KPDandLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00002ee2  00002f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  00800190  00800190  000030a6  2**0
                  ALLOC
  3 .stab         00002064  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d13  00000000  00000000  0000510c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00005e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00005fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00006231  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00008ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000b4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000b6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000b9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c42d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <main>
      8a:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 38 17 	jmp	0x2e70	; 0x2e70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 44 17 	jmp	0x2e88	; 0x2e88 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 41 17 	jmp	0x2e82	; 0x2e82 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 40 17 	jmp	0x2e80	; 0x2e80 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 5c 17 	jmp	0x2eb8	; 0x2eb8 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit            (void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Set Initial Direction For Ports */
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION
     f52:	ea e3       	ldi	r30, 0x3A	; 58
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	8e e7       	ldi	r24, 0x7E	; 126
     f58:	80 83       	st	Z, r24
						  ,DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION
     f5a:	e7 e3       	ldi	r30, 0x37	; 55
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 ef       	ldi	r24, 0xF0	; 240
     f60:	80 83       	st	Z, r24
						  ,DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION						  
     f62:	e4 e3       	ldi	r30, 0x34	; 52
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	87 e0       	ldi	r24, 0x07	; 7
     f68:	80 83       	st	Z, r24
						  ,DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION						  
     f6a:	e1 e3       	ldi	r30, 0x31	; 49
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	83 ec       	ldi	r24, 0xC3	; 195
     f70:	80 83       	st	Z, r24
						  ,DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);					  

	/* Set Initial Values For Ports */
	
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE	
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	10 82       	st	Z, r1
						  ,DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);	
	                                                                                   
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE	
     f78:	e8 e3       	ldi	r30, 0x38	; 56
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 ef       	ldi	r24, 0xF0	; 240
     f7e:	80 83       	st	Z, r24
						  ,DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);	
	                                                                                   
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE		
     f80:	e5 e3       	ldi	r30, 0x35	; 53
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	10 82       	st	Z, r1
						  ,DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);	
	                                                                                    
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE		
     f86:	e2 e3       	ldi	r30, 0x32	; 50
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8c e3       	ldi	r24, 0x3C	; 60
     f8c:	80 83       	st	Z, r24
						  ,DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);	
	
}
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <DIO_u8SetPinDirection>:
	
u8    DIO_u8SetPinDirection  (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 Copy_u8PinDirection)
{
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <DIO_u8SetPinDirection+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <DIO_u8SetPinDirection+0x8>
     f9c:	00 d0       	rcall	.+0      	; 0xf9e <DIO_u8SetPinDirection+0xa>
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	6b 83       	std	Y+3, r22	; 0x03
     fa6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	08 f0       	brcs	.+2      	; 0xfb4 <DIO_u8SetPinDirection+0x20>
     fb2:	dd c0       	rjmp	.+442    	; 0x116e <DIO_u8SetPinDirection+0x1da>
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	88 30       	cpi	r24, 0x08	; 8
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <DIO_u8SetPinDirection+0x28>
     fba:	d9 c0       	rjmp	.+434    	; 0x116e <DIO_u8SetPinDirection+0x1da>
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	88 23       	and	r24, r24
     fc0:	21 f0       	breq	.+8      	; 0xfca <DIO_u8SetPinDirection+0x36>
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f0       	breq	.+2      	; 0xfca <DIO_u8SetPinDirection+0x36>
     fc8:	d2 c0       	rjmp	.+420    	; 0x116e <DIO_u8SetPinDirection+0x1da>
		&& ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
	{
		switch(Copy_u8PortId)
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	3e 83       	std	Y+6, r19	; 0x06
     fd2:	2d 83       	std	Y+5, r18	; 0x05
     fd4:	8d 81       	ldd	r24, Y+5	; 0x05
     fd6:	9e 81       	ldd	r25, Y+6	; 0x06
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <DIO_u8SetPinDirection+0x4c>
     fde:	43 c0       	rjmp	.+134    	; 0x1066 <DIO_u8SetPinDirection+0xd2>
     fe0:	2d 81       	ldd	r18, Y+5	; 0x05
     fe2:	3e 81       	ldd	r19, Y+6	; 0x06
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	2c f4       	brge	.+10     	; 0xff4 <DIO_u8SetPinDirection+0x60>
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	71 f0       	breq	.+28     	; 0x100e <DIO_u8SetPinDirection+0x7a>
     ff2:	be c0       	rjmp	.+380    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
     ff4:	2d 81       	ldd	r18, Y+5	; 0x05
     ff6:	3e 81       	ldd	r19, Y+6	; 0x06
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	09 f4       	brne	.+2      	; 0x1000 <DIO_u8SetPinDirection+0x6c>
     ffe:	5f c0       	rjmp	.+190    	; 0x10be <DIO_u8SetPinDirection+0x12a>
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_u8SetPinDirection+0x78>
    100a:	85 c0       	rjmp	.+266    	; 0x1116 <DIO_u8SetPinDirection+0x182>
    100c:	b1 c0       	rjmp	.+354    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
		{
			case DIO_u8_PORTA:
				if(Copy_u8PinDirection == DIO_u8_INPUT)
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	88 23       	and	r24, r24
    1012:	a9 f4       	brne	.+42     	; 0x103e <DIO_u8SetPinDirection+0xaa>
				{
					CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    1014:	aa e3       	ldi	r26, 0x3A	; 58
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ea e3       	ldi	r30, 0x3A	; 58
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_u8SetPinDirection+0x9e>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_u8SetPinDirection+0x9a>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	99 c0       	rjmp	.+306    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    103e:	aa e3       	ldi	r26, 0x3A	; 58
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_u8SetPinDirection+0xc8>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_u8SetPinDirection+0xc4>
    1060:	84 2b       	or	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
			break;
			
			case DIO_u8_PORTB:
				if(Copy_u8PinDirection == DIO_u8_INPUT)
    1066:	8c 81       	ldd	r24, Y+4	; 0x04
    1068:	88 23       	and	r24, r24
    106a:	a9 f4       	brne	.+42     	; 0x1096 <DIO_u8SetPinDirection+0x102>
				{
					CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    106c:	a7 e3       	ldi	r26, 0x37	; 55
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e7 e3       	ldi	r30, 0x37	; 55
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8SetPinDirection+0xf6>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8SetPinDirection+0xf2>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	6d c0       	rjmp	.+218    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    1096:	a7 e3       	ldi	r26, 0x37	; 55
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e7 e3       	ldi	r30, 0x37	; 55
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8SetPinDirection+0x120>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8SetPinDirection+0x11c>
    10b8:	84 2b       	or	r24, r20
    10ba:	8c 93       	st	X, r24
    10bc:	59 c0       	rjmp	.+178    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
			break;
						
		    case DIO_u8_PORTC:
				if(Copy_u8PinDirection == DIO_u8_INPUT)
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	88 23       	and	r24, r24
    10c2:	a9 f4       	brne	.+42     	; 0x10ee <DIO_u8SetPinDirection+0x15a>
				{
					CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    10c4:	a4 e3       	ldi	r26, 0x34	; 52
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_u8SetPinDirection+0x14e>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_u8SetPinDirection+0x14a>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	41 c0       	rjmp	.+130    	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    10ee:	a4 e3       	ldi	r26, 0x34	; 52
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e4 e3       	ldi	r30, 0x34	; 52
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 2e       	mov	r0, r18
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_u8SetPinDirection+0x178>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	0a 94       	dec	r0
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_u8SetPinDirection+0x174>
    1110:	84 2b       	or	r24, r20
    1112:	8c 93       	st	X, r24
    1114:	2d c0       	rjmp	.+90     	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
			break;
						
			case DIO_u8_PORTD:
				if(Copy_u8PinDirection == DIO_u8_INPUT)
    1116:	8c 81       	ldd	r24, Y+4	; 0x04
    1118:	88 23       	and	r24, r24
    111a:	a9 f4       	brne	.+42     	; 0x1146 <DIO_u8SetPinDirection+0x1b2>
				{
					CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    111c:	a1 e3       	ldi	r26, 0x31	; 49
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e1 e3       	ldi	r30, 0x31	; 49
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8SetPinDirection+0x1a6>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8SetPinDirection+0x1a2>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	15 c0       	rjmp	.+42     	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
				}
				else
				{
					SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    1146:	a1 e3       	ldi	r26, 0x31	; 49
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e1 e3       	ldi	r30, 0x31	; 49
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_u8SetPinDirection+0x1d0>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_u8SetPinDirection+0x1cc>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <DIO_u8SetPinDirection+0x1dc>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    116e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState; 
    1170:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1172:	26 96       	adiw	r28, 0x06	; 6
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	cf 91       	pop	r28
    1180:	df 91       	pop	r29
    1182:	08 95       	ret

00001184 <DIO_u8SetPinVale>:

u8    DIO_u8SetPinVale       (u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{	
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	00 d0       	rcall	.+0      	; 0x118a <DIO_u8SetPinVale+0x6>
    118a:	00 d0       	rcall	.+0      	; 0x118c <DIO_u8SetPinVale+0x8>
    118c:	00 d0       	rcall	.+0      	; 0x118e <DIO_u8SetPinVale+0xa>
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	6b 83       	std	Y+3, r22	; 0x03
    1196:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
	if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	08 f0       	brcs	.+2      	; 0x11a4 <DIO_u8SetPinVale+0x20>
    11a2:	dd c0       	rjmp	.+442    	; 0x135e <DIO_u8SetPinVale+0x1da>
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 30       	cpi	r24, 0x08	; 8
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <DIO_u8SetPinVale+0x28>
    11aa:	d9 c0       	rjmp	.+434    	; 0x135e <DIO_u8SetPinVale+0x1da>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	21 f0       	breq	.+8      	; 0x11ba <DIO_u8SetPinVale+0x36>
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	88 23       	and	r24, r24
    11b6:	09 f0       	breq	.+2      	; 0x11ba <DIO_u8SetPinVale+0x36>
    11b8:	d2 c0       	rjmp	.+420    	; 0x135e <DIO_u8SetPinVale+0x1da>
		&& ( (Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW) ) )
		{
			switch(Copy_u8PortId)
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	3e 83       	std	Y+6, r19	; 0x06
    11c2:	2d 83       	std	Y+5, r18	; 0x05
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	91 05       	cpc	r25, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <DIO_u8SetPinVale+0x4c>
    11ce:	43 c0       	rjmp	.+134    	; 0x1256 <DIO_u8SetPinVale+0xd2>
    11d0:	2d 81       	ldd	r18, Y+5	; 0x05
    11d2:	3e 81       	ldd	r19, Y+6	; 0x06
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <DIO_u8SetPinVale+0x60>
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	71 f0       	breq	.+28     	; 0x11fe <DIO_u8SetPinVale+0x7a>
    11e2:	be c0       	rjmp	.+380    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <DIO_u8SetPinVale+0x6c>
    11ee:	5f c0       	rjmp	.+190    	; 0x12ae <DIO_u8SetPinVale+0x12a>
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <DIO_u8SetPinVale+0x78>
    11fa:	85 c0       	rjmp	.+266    	; 0x1306 <DIO_u8SetPinVale+0x182>
    11fc:	b1 c0       	rjmp	.+354    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
			{
				case DIO_u8_PORTA:
					if(Copy_u8PinValue == DIO_u8_HIGH)
    11fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	a1 f4       	brne	.+40     	; 0x122c <DIO_u8SetPinVale+0xa8>
					{
						SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1204:	ab e3       	ldi	r26, 0x3B	; 59
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	eb e3       	ldi	r30, 0x3B	; 59
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	48 2f       	mov	r20, r24
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_u8SetPinVale+0x9e>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_u8SetPinVale+0x9a>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
    122a:	9a c0       	rjmp	.+308    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
					else
					{
						CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    122c:	ab e3       	ldi	r26, 0x3B	; 59
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	eb e3       	ldi	r30, 0x3B	; 59
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	02 2e       	mov	r0, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8SetPinVale+0xc6>
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	0a 94       	dec	r0
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8SetPinVale+0xc2>
    124e:	80 95       	com	r24
    1250:	84 23       	and	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	85 c0       	rjmp	.+266    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
				break;
				
				case DIO_u8_PORTB:
					if(Copy_u8PinValue == DIO_u8_HIGH)
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	a1 f4       	brne	.+40     	; 0x1284 <DIO_u8SetPinVale+0x100>
					{
						SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    125c:	a8 e3       	ldi	r26, 0x38	; 56
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e8 e3       	ldi	r30, 0x38	; 56
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 2e       	mov	r0, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <DIO_u8SetPinVale+0xf6>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <DIO_u8SetPinVale+0xf2>
    127e:	84 2b       	or	r24, r20
    1280:	8c 93       	st	X, r24
    1282:	6e c0       	rjmp	.+220    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
					else
					{
						CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	48 2f       	mov	r20, r24
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	02 2e       	mov	r0, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_u8SetPinVale+0x11e>
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	0a 94       	dec	r0
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_u8SetPinVale+0x11a>
    12a6:	80 95       	com	r24
    12a8:	84 23       	and	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	59 c0       	rjmp	.+178    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
				break;
				
				case DIO_u8_PORTC:
					if(Copy_u8PinValue == DIO_u8_HIGH)
    12ae:	8c 81       	ldd	r24, Y+4	; 0x04
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	a1 f4       	brne	.+40     	; 0x12dc <DIO_u8SetPinVale+0x158>
					{
						SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    12b4:	a5 e3       	ldi	r26, 0x35	; 53
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e3       	ldi	r30, 0x35	; 53
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8SetPinVale+0x14e>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8SetPinVale+0x14a>
    12d6:	84 2b       	or	r24, r20
    12d8:	8c 93       	st	X, r24
    12da:	42 c0       	rjmp	.+132    	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
					else
					{
						CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    12dc:	a5 e3       	ldi	r26, 0x35	; 53
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e5 e3       	ldi	r30, 0x35	; 53
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8SetPinVale+0x176>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8SetPinVale+0x172>
    12fe:	80 95       	com	r24
    1300:	84 23       	and	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	2d c0       	rjmp	.+90     	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
				break;
				
				case DIO_u8_PORTD:
					if(Copy_u8PinValue == DIO_u8_HIGH)
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	a1 f4       	brne	.+40     	; 0x1334 <DIO_u8SetPinVale+0x1b0>
					{
						SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    130c:	a5 e3       	ldi	r26, 0x35	; 53
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e5 e3       	ldi	r30, 0x35	; 53
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8SetPinVale+0x1a6>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_u8SetPinVale+0x1a2>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	16 c0       	rjmp	.+44     	; 0x1360 <DIO_u8SetPinVale+0x1dc>
					}
					else
					{
						CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    1334:	a5 e3       	ldi	r26, 0x35	; 53
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e3       	ldi	r30, 0x35	; 53
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8SetPinVale+0x1ce>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8SetPinVale+0x1ca>
    1356:	80 95       	com	r24
    1358:	84 23       	and	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <DIO_u8SetPinVale+0x1dc>
			}
			
		}
		else
		{
			Local_u8ErrorState=STD_TYPES_NOK;
    135e:	19 82       	std	Y+1, r1	; 0x01
		}
	
	return Local_u8ErrorState;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	26 96       	adiw	r28, 0x06	; 6
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_u8GetPinVale>:

u8    DIO_u8GetPinVale       (u8 Copy_u8PortId,u8 Copy_u8PinId,u8 * Copy_pu8PinValue)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	28 97       	sbiw	r28, 0x08	; 8
    137e:	0f b6       	in	r0, 0x3f	; 63
    1380:	f8 94       	cli
    1382:	de bf       	out	0x3e, r29	; 62
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	cd bf       	out	0x3d, r28	; 61
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	6c 83       	std	Y+4, r22	; 0x04
    138c:	5e 83       	std	Y+6, r21	; 0x06
    138e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReturnedPinVale;
	if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8PinValue != NULL) )
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	08 f0       	brcs	.+2      	; 0x139c <DIO_u8GetPinVale+0x28>
    139a:	9f c0       	rjmp	.+318    	; 0x14da <DIO_u8GetPinVale+0x166>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	88 30       	cpi	r24, 0x08	; 8
    13a0:	08 f0       	brcs	.+2      	; 0x13a4 <DIO_u8GetPinVale+0x30>
    13a2:	9b c0       	rjmp	.+310    	; 0x14da <DIO_u8GetPinVale+0x166>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO_u8GetPinVale+0x3a>
    13ac:	96 c0       	rjmp	.+300    	; 0x14da <DIO_u8GetPinVale+0x166>
	{
		switch(Copy_u8PortId)
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	38 87       	std	Y+8, r19	; 0x08
    13b6:	2f 83       	std	Y+7, r18	; 0x07
    13b8:	4f 81       	ldd	r20, Y+7	; 0x07
    13ba:	58 85       	ldd	r21, Y+8	; 0x08
    13bc:	41 30       	cpi	r20, 0x01	; 1
    13be:	51 05       	cpc	r21, r1
    13c0:	a9 f1       	breq	.+106    	; 0x142c <DIO_u8GetPinVale+0xb8>
    13c2:	8f 81       	ldd	r24, Y+7	; 0x07
    13c4:	98 85       	ldd	r25, Y+8	; 0x08
    13c6:	82 30       	cpi	r24, 0x02	; 2
    13c8:	91 05       	cpc	r25, r1
    13ca:	34 f4       	brge	.+12     	; 0x13d8 <DIO_u8GetPinVale+0x64>
    13cc:	2f 81       	ldd	r18, Y+7	; 0x07
    13ce:	38 85       	ldd	r19, Y+8	; 0x08
    13d0:	21 15       	cp	r18, r1
    13d2:	31 05       	cpc	r19, r1
    13d4:	71 f0       	breq	.+28     	; 0x13f2 <DIO_u8GetPinVale+0x7e>
    13d6:	82 c0       	rjmp	.+260    	; 0x14dc <DIO_u8GetPinVale+0x168>
    13d8:	4f 81       	ldd	r20, Y+7	; 0x07
    13da:	58 85       	ldd	r21, Y+8	; 0x08
    13dc:	42 30       	cpi	r20, 0x02	; 2
    13de:	51 05       	cpc	r21, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <DIO_u8GetPinVale+0x70>
    13e2:	41 c0       	rjmp	.+130    	; 0x1466 <DIO_u8GetPinVale+0xf2>
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	98 85       	ldd	r25, Y+8	; 0x08
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_u8GetPinVale+0x7c>
    13ee:	58 c0       	rjmp	.+176    	; 0x14a0 <DIO_u8GetPinVale+0x12c>
    13f0:	75 c0       	rjmp	.+234    	; 0x14dc <DIO_u8GetPinVale+0x168>
		{
			case DIO_u8_PORTA:
			  Local_u8ReturnedPinVale = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    13f2:	e9 e3       	ldi	r30, 0x39	; 57
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_u8GetPinVale+0x96>
    1406:	55 95       	asr	r21
    1408:	47 95       	ror	r20
    140a:	8a 95       	dec	r24
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_u8GetPinVale+0x92>
    140e:	ca 01       	movw	r24, r20
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	89 83       	std	Y+1, r24	; 0x01
			  if(Local_u8ReturnedPinVale == 0)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	88 23       	and	r24, r24
    1418:	21 f4       	brne	.+8      	; 0x1422 <DIO_u8GetPinVale+0xae>
			  {
				*Copy_pu8PinValue = DIO_u8_LOW;
    141a:	ed 81       	ldd	r30, Y+5	; 0x05
    141c:	fe 81       	ldd	r31, Y+6	; 0x06
    141e:	10 82       	st	Z, r1
    1420:	5d c0       	rjmp	.+186    	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			  else
			  {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    1422:	ed 81       	ldd	r30, Y+5	; 0x05
    1424:	fe 81       	ldd	r31, Y+6	; 0x06
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24
    142a:	58 c0       	rjmp	.+176    	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			break;
			
			case DIO_u8_PORTB:
			  Local_u8ReturnedPinVale = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    142c:	e6 e3       	ldi	r30, 0x36	; 54
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	80 81       	ld	r24, Z
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	a9 01       	movw	r20, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_u8GetPinVale+0xd0>
    1440:	55 95       	asr	r21
    1442:	47 95       	ror	r20
    1444:	8a 95       	dec	r24
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_u8GetPinVale+0xcc>
    1448:	ca 01       	movw	r24, r20
    144a:	81 70       	andi	r24, 0x01	; 1
    144c:	89 83       	std	Y+1, r24	; 0x01
			  if(Local_u8ReturnedPinVale == 0)
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	88 23       	and	r24, r24
    1452:	21 f4       	brne	.+8      	; 0x145c <DIO_u8GetPinVale+0xe8>
			  {
				*Copy_pu8PinValue = DIO_u8_LOW;
    1454:	ed 81       	ldd	r30, Y+5	; 0x05
    1456:	fe 81       	ldd	r31, Y+6	; 0x06
    1458:	10 82       	st	Z, r1
    145a:	40 c0       	rjmp	.+128    	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			  else
			  {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    145c:	ed 81       	ldd	r30, Y+5	; 0x05
    145e:	fe 81       	ldd	r31, Y+6	; 0x06
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	80 83       	st	Z, r24
    1464:	3b c0       	rjmp	.+118    	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			break;
			
			case DIO_u8_PORTC:
			  Local_u8ReturnedPinVale = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1466:	e3 e3       	ldi	r30, 0x33	; 51
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8c 81       	ldd	r24, Y+4	; 0x04
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	a9 01       	movw	r20, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8GetPinVale+0x10a>
    147a:	55 95       	asr	r21
    147c:	47 95       	ror	r20
    147e:	8a 95       	dec	r24
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8GetPinVale+0x106>
    1482:	ca 01       	movw	r24, r20
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	89 83       	std	Y+1, r24	; 0x01
			  if(Local_u8ReturnedPinVale == 0)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	88 23       	and	r24, r24
    148c:	21 f4       	brne	.+8      	; 0x1496 <DIO_u8GetPinVale+0x122>
			  {
				*Copy_pu8PinValue = DIO_u8_LOW;
    148e:	ed 81       	ldd	r30, Y+5	; 0x05
    1490:	fe 81       	ldd	r31, Y+6	; 0x06
    1492:	10 82       	st	Z, r1
    1494:	23 c0       	rjmp	.+70     	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			  else
			  {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    1496:	ed 81       	ldd	r30, Y+5	; 0x05
    1498:	fe 81       	ldd	r31, Y+6	; 0x06
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	80 83       	st	Z, r24
    149e:	1e c0       	rjmp	.+60     	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			break;
			
			case DIO_u8_PORTD:
			  Local_u8ReturnedPinVale = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    14a0:	e0 e3       	ldi	r30, 0x30	; 48
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8GetPinVale+0x144>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_u8GetPinVale+0x140>
    14bc:	ca 01       	movw	r24, r20
    14be:	81 70       	andi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
			  if(Local_u8ReturnedPinVale == 0)
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	88 23       	and	r24, r24
    14c6:	21 f4       	brne	.+8      	; 0x14d0 <DIO_u8GetPinVale+0x15c>
			  {
				*Copy_pu8PinValue = DIO_u8_LOW;
    14c8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ca:	fe 81       	ldd	r31, Y+6	; 0x06
    14cc:	10 82       	st	Z, r1
    14ce:	06 c0       	rjmp	.+12     	; 0x14dc <DIO_u8GetPinVale+0x168>
			  }
			  else
			  {
				*Copy_pu8PinValue = DIO_u8_HIGH;
    14d0:	ed 81       	ldd	r30, Y+5	; 0x05
    14d2:	fe 81       	ldd	r31, Y+6	; 0x06
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	80 83       	st	Z, r24
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <DIO_u8GetPinVale+0x168>
			break;
		}		
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
    14da:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02

}
    14de:	28 96       	adiw	r28, 0x08	; 8
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <DIO_u8SetPortDirection>:

u8    DIO_u8SetPortDirection (u8 Copy_u8PortId,u8 Copy_u8PortDirection)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <DIO_u8SetPortDirection+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <DIO_u8SetPortDirection+0x8>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	8a 83       	std	Y+2, r24	; 0x02
    1500:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
	if( (Copy_u8PortId <= DIO_u8_PORTD) && ( (Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT) ) )
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	08 f0       	brcs	.+2      	; 0x150e <DIO_u8SetPortDirection+0x1e>
    150c:	56 c0       	rjmp	.+172    	; 0x15ba <DIO_u8SetPortDirection+0xca>
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	21 f0       	breq	.+8      	; 0x151c <DIO_u8SetPortDirection+0x2c>
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 23       	and	r24, r24
    1518:	09 f0       	breq	.+2      	; 0x151c <DIO_u8SetPortDirection+0x2c>
    151a:	4f c0       	rjmp	.+158    	; 0x15ba <DIO_u8SetPortDirection+0xca>
	{
		switch(Copy_u8PortId)
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	09 f1       	breq	.+66     	; 0x1572 <DIO_u8SetPortDirection+0x82>
    1530:	2c 81       	ldd	r18, Y+4	; 0x04
    1532:	3d 81       	ldd	r19, Y+5	; 0x05
    1534:	22 30       	cpi	r18, 0x02	; 2
    1536:	31 05       	cpc	r19, r1
    1538:	2c f4       	brge	.+10     	; 0x1544 <DIO_u8SetPortDirection+0x54>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	61 f0       	breq	.+24     	; 0x155a <DIO_u8SetPortDirection+0x6a>
    1542:	3c c0       	rjmp	.+120    	; 0x15bc <DIO_u8SetPortDirection+0xcc>
    1544:	2c 81       	ldd	r18, Y+4	; 0x04
    1546:	3d 81       	ldd	r19, Y+5	; 0x05
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	f1 f0       	breq	.+60     	; 0x158a <DIO_u8SetPortDirection+0x9a>
    154e:	8c 81       	ldd	r24, Y+4	; 0x04
    1550:	9d 81       	ldd	r25, Y+5	; 0x05
    1552:	83 30       	cpi	r24, 0x03	; 3
    1554:	91 05       	cpc	r25, r1
    1556:	29 f1       	breq	.+74     	; 0x15a2 <DIO_u8SetPortDirection+0xb2>
    1558:	31 c0       	rjmp	.+98     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
		{
			case DIO_u8_PORTA:
				if(Copy_u8PortDirection == DIO_u8_OUTPUT)
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	29 f4       	brne	.+10     	; 0x156a <DIO_u8SetPortDirection+0x7a>
				{
					DIO_u8_DDRA_REG = 0xff;
    1560:	ea e3       	ldi	r30, 0x3A	; 58
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8f ef       	ldi	r24, 0xFF	; 255
    1566:	80 83       	st	Z, r24
    1568:	29 c0       	rjmp	.+82     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
				else
				{
					DIO_u8_DDRA_REG = 0x00;
    156a:	ea e3       	ldi	r30, 0x3A	; 58
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	10 82       	st	Z, r1
    1570:	25 c0       	rjmp	.+74     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
			break;
			
			case DIO_u8_PORTB:
				if(Copy_u8PortDirection == DIO_u8_OUTPUT)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	29 f4       	brne	.+10     	; 0x1582 <DIO_u8SetPortDirection+0x92>
				{
					DIO_u8_DDRB_REG = 0xff;
    1578:	e7 e3       	ldi	r30, 0x37	; 55
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	80 83       	st	Z, r24
    1580:	1d c0       	rjmp	.+58     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
				else
				{
					DIO_u8_DDRB_REG = 0x00;
    1582:	e7 e3       	ldi	r30, 0x37	; 55
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	10 82       	st	Z, r1
    1588:	19 c0       	rjmp	.+50     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
			break;
			
			case DIO_u8_PORTC:
				if(Copy_u8PortDirection == DIO_u8_OUTPUT)
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	29 f4       	brne	.+10     	; 0x159a <DIO_u8SetPortDirection+0xaa>
				{
					DIO_u8_DDRC_REG = 0xff;
    1590:	e4 e3       	ldi	r30, 0x34	; 52
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8f ef       	ldi	r24, 0xFF	; 255
    1596:	80 83       	st	Z, r24
    1598:	11 c0       	rjmp	.+34     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
				else
				{
					DIO_u8_DDRC_REG = 0x00;
    159a:	e4 e3       	ldi	r30, 0x34	; 52
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	10 82       	st	Z, r1
    15a0:	0d c0       	rjmp	.+26     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
			break;
			
			case DIO_u8_PORTD:
				if(Copy_u8PortDirection == DIO_u8_OUTPUT)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	29 f4       	brne	.+10     	; 0x15b2 <DIO_u8SetPortDirection+0xc2>
				{
					DIO_u8_DDRD_REG = 0xff;
    15a8:	e1 e3       	ldi	r30, 0x31	; 49
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	80 83       	st	Z, r24
    15b0:	05 c0       	rjmp	.+10     	; 0x15bc <DIO_u8SetPortDirection+0xcc>
				}
				else
				{
					DIO_u8_DDRD_REG = 0x00;
    15b2:	e1 e3       	ldi	r30, 0x31	; 49
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	10 82       	st	Z, r1
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <DIO_u8SetPortDirection+0xcc>
			
		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <DIO_u8SetPortVale>:

u8    DIO_u8SetPortVale      (u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <DIO_u8SetPortVale+0x6>
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <DIO_u8SetPortVale+0x8>
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
    15de:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_u8PortId)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3d 83       	std	Y+5, r19	; 0x05
    15ec:	2c 83       	std	Y+4, r18	; 0x04
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	91 05       	cpc	r25, r1
    15f6:	d1 f0       	breq	.+52     	; 0x162c <DIO_u8SetPortVale+0x5e>
    15f8:	2c 81       	ldd	r18, Y+4	; 0x04
    15fa:	3d 81       	ldd	r19, Y+5	; 0x05
    15fc:	22 30       	cpi	r18, 0x02	; 2
    15fe:	31 05       	cpc	r19, r1
    1600:	2c f4       	brge	.+10     	; 0x160c <DIO_u8SetPortVale+0x3e>
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	61 f0       	breq	.+24     	; 0x1622 <DIO_u8SetPortVale+0x54>
    160a:	1f c0       	rjmp	.+62     	; 0x164a <DIO_u8SetPortVale+0x7c>
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	81 f0       	breq	.+32     	; 0x1636 <DIO_u8SetPortVale+0x68>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	81 f0       	breq	.+32     	; 0x1640 <DIO_u8SetPortVale+0x72>
    1620:	14 c0       	rjmp	.+40     	; 0x164a <DIO_u8SetPortVale+0x7c>
	{
		case DIO_u8_PORTA: DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    1622:	eb e3       	ldi	r30, 0x3B	; 59
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	80 83       	st	Z, r24
    162a:	10 c0       	rjmp	.+32     	; 0x164c <DIO_u8SetPortVale+0x7e>
		case DIO_u8_PORTB: DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	80 83       	st	Z, r24
    1634:	0b c0       	rjmp	.+22     	; 0x164c <DIO_u8SetPortVale+0x7e>
		case DIO_u8_PORTC: DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	80 83       	st	Z, r24
    163e:	06 c0       	rjmp	.+12     	; 0x164c <DIO_u8SetPortVale+0x7e>
		case DIO_u8_PORTD: DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	80 83       	st	Z, r24
    1648:	01 c0       	rjmp	.+2      	; 0x164c <DIO_u8SetPortVale+0x7e>
		default:Local_u8ErrorState=STD_TYPES_NOK;
    164a:	19 82       	std	Y+1, r1	; 0x01

	}
	
	return Local_u8ErrorState;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
}
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	0f 90       	pop	r0
    1656:	0f 90       	pop	r0
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_u8GetPortVale>:


u8    DIO_u8GetPortVale      (u8 Copy_u8PortId,u8 * Copy_pu8PortValue)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_u8GetPortVale+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_u8GetPortVale+0x8>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <DIO_u8GetPortVale+0xa>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	7c 83       	std	Y+4, r23	; 0x04
    1670:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8PortValue != NULL)
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	d9 f1       	breq	.+118    	; 0x16f4 <DIO_u8GetPortVale+0x96>
	{
		switch(Copy_u8PortId)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3e 83       	std	Y+6, r19	; 0x06
    1686:	2d 83       	std	Y+5, r18	; 0x05
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	e1 f0       	breq	.+56     	; 0x16ca <DIO_u8GetPortVale+0x6c>
    1692:	2d 81       	ldd	r18, Y+5	; 0x05
    1694:	3e 81       	ldd	r19, Y+6	; 0x06
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	2c f4       	brge	.+10     	; 0x16a6 <DIO_u8GetPortVale+0x48>
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	61 f0       	breq	.+24     	; 0x16bc <DIO_u8GetPortVale+0x5e>
    16a4:	28 c0       	rjmp	.+80     	; 0x16f6 <DIO_u8GetPortVale+0x98>
    16a6:	2d 81       	ldd	r18, Y+5	; 0x05
    16a8:	3e 81       	ldd	r19, Y+6	; 0x06
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	a1 f0       	breq	.+40     	; 0x16d8 <DIO_u8GetPortVale+0x7a>
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	b1 f0       	breq	.+44     	; 0x16e6 <DIO_u8GetPortVale+0x88>
    16ba:	1d c0       	rjmp	.+58     	; 0x16f6 <DIO_u8GetPortVale+0x98>
		{
			case DIO_u8_PORTA:* Copy_pu8PortValue= DIO_u8_PORTA_REG;break;
    16bc:	eb e3       	ldi	r30, 0x3B	; 59
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	eb 81       	ldd	r30, Y+3	; 0x03
    16c4:	fc 81       	ldd	r31, Y+4	; 0x04
    16c6:	80 83       	st	Z, r24
    16c8:	16 c0       	rjmp	.+44     	; 0x16f6 <DIO_u8GetPortVale+0x98>
			case DIO_u8_PORTB:* Copy_pu8PortValue= DIO_u8_PORTB_REG;break;
    16ca:	e8 e3       	ldi	r30, 0x38	; 56
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	eb 81       	ldd	r30, Y+3	; 0x03
    16d2:	fc 81       	ldd	r31, Y+4	; 0x04
    16d4:	80 83       	st	Z, r24
    16d6:	0f c0       	rjmp	.+30     	; 0x16f6 <DIO_u8GetPortVale+0x98>
			case DIO_u8_PORTC:* Copy_pu8PortValue= DIO_u8_PORTC_REG;break;
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	eb 81       	ldd	r30, Y+3	; 0x03
    16e0:	fc 81       	ldd	r31, Y+4	; 0x04
    16e2:	80 83       	st	Z, r24
    16e4:	08 c0       	rjmp	.+16     	; 0x16f6 <DIO_u8GetPortVale+0x98>
			case DIO_u8_PORTD:* Copy_pu8PortValue= DIO_u8_PORTD_REG;break;
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	80 83       	st	Z, r24
    16f2:	01 c0       	rjmp	.+2      	; 0x16f6 <DIO_u8GetPortVale+0x98>

		}
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOK;
    16f4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    16f6:	89 81       	ldd	r24, Y+1	; 0x01

}
    16f8:	26 96       	adiw	r28, 0x06	; 6
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <KPD_u8GetState>:
#include "KPD_private.h"
#include "KPD_config.h"


u8 KPD_u8GetState(u8 * Copy_pu8ReturnedSwitch)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	27 97       	sbiw	r28, 0x07	; 7
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	9f 83       	std	Y+7, r25	; 0x07
    1720:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ReturnState=STD_TYPES_OK;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8PinValue,Local_u8Flag=0;
    1726:	1b 82       	std	Y+3, r1	; 0x03
	static u8 Local_Au8RowsPinArr[KPD_u8_ROWS_NB]= KPD_ROWS_PINS;// static to add it to .data withouth pushing in stack every calling
	static u8 Local_Au8ColsPinArr[KPD_u8_COLS_NB]=KPD_ROWS_PIN; // static to add it to .data withouth pushing in stack every calling
	static Local_Au8KPDValues[KPD_u8_ROWS_NB][KPD_u8_COLS_NB] =KPD_KEYS;
	if(Copy_pu8ReturnedSwitch != NULL)
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	9f 81       	ldd	r25, Y+7	; 0x07
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <KPD_u8GetState+0x28>
    1730:	71 c0       	rjmp	.+226    	; 0x1814 <KPD_u8GetState+0x10a>
	{
		*Copy_pu8ReturnedSwitch= KPD_u8_NOT_PRESSED;
    1732:	ee 81       	ldd	r30, Y+6	; 0x06
    1734:	ff 81       	ldd	r31, Y+7	; 0x07
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	80 83       	st	Z, r24
		for(u8 Local_u8RowCounter=0; Local_u8RowCounter<KPD_u8_ROWS_NB ;Local_u8RowCounter++)
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	66 c0       	rjmp	.+204    	; 0x180a <KPD_u8GetState+0x100>
		{
			/* Activate Each Row */
			DIO_u8SetPinVale(KPD_u8_ROWS_PORT,Local_Au8RowsPinArr[Local_u8RowCounter], DIO_u8_LOW);
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	fc 01       	movw	r30, r24
    1746:	e4 57       	subi	r30, 0x74	; 116
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	90 81       	ld	r25, Z
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	69 2f       	mov	r22, r25
    1750:	40 e0       	ldi	r20, 0x00	; 0
    1752:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
			/* Loop To Check Cols Pins */
			for(u8 Local_u8ColsCounter = 0; Local_u8ColsCounter<KPD_u8_COLS_NB; Local_u8ColsCounter++)
    1756:	19 82       	std	Y+1, r1	; 0x01
    1758:	42 c0       	rjmp	.+132    	; 0x17de <KPD_u8GetState+0xd4>
			{
				/* Check If Col Is in Low State */
				DIO_u8GetPinVale(KPD_u8_COLS_PORT,Local_Au8ColsPinArr[Local_u8ColsCounter],&Local_u8PinValue);
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	fc 01       	movw	r30, r24
    1762:	e8 57       	subi	r30, 0x78	; 120
    1764:	fe 4f       	sbci	r31, 0xFE	; 254
    1766:	90 81       	ld	r25, Z
    1768:	9e 01       	movw	r18, r28
    176a:	2b 5f       	subi	r18, 0xFB	; 251
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	69 2f       	mov	r22, r25
    1772:	a9 01       	movw	r20, r18
    1774:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_u8GetPinVale>
				if(Local_u8PinValue == DIO_u8_LOW)
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	88 23       	and	r24, r24
    177c:	69 f5       	brne	.+90     	; 0x17d8 <KPD_u8GetState+0xce>
				{
					*Copy_pu8ReturnedSwitch= Local_Au8KPDValues[Local_u8RowCounter][Local_u8ColsCounter];
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	48 2f       	mov	r20, r24
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	ca 01       	movw	r24, r20
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	82 0f       	add	r24, r18
    1796:	93 1f       	adc	r25, r19
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	fc 01       	movw	r30, r24
    179e:	e8 59       	subi	r30, 0x98	; 152
    17a0:	fe 4f       	sbci	r31, 0xFE	; 254
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	ee 81       	ldd	r30, Y+6	; 0x06
    17a8:	ff 81       	ldd	r31, Y+7	; 0x07
    17aa:	80 83       	st	Z, r24
    17ac:	0f c0       	rjmp	.+30     	; 0x17cc <KPD_u8GetState+0xc2>
					while(Local_u8PinValue == DIO_u8_LOW)
					{
					DIO_u8GetPinVale(KPD_u8_COLS_PORT,Local_Au8ColsPinArr[Local_u8ColsCounter],&Local_u8PinValue);
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	e8 57       	subi	r30, 0x78	; 120
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	90 81       	ld	r25, Z
    17bc:	9e 01       	movw	r18, r28
    17be:	2b 5f       	subi	r18, 0xFB	; 251
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	69 2f       	mov	r22, r25
    17c6:	a9 01       	movw	r20, r18
    17c8:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_u8GetPinVale>
				/* Check If Col Is in Low State */
				DIO_u8GetPinVale(KPD_u8_COLS_PORT,Local_Au8ColsPinArr[Local_u8ColsCounter],&Local_u8PinValue);
				if(Local_u8PinValue == DIO_u8_LOW)
				{
					*Copy_pu8ReturnedSwitch= Local_Au8KPDValues[Local_u8RowCounter][Local_u8ColsCounter];
					while(Local_u8PinValue == DIO_u8_LOW)
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	88 23       	and	r24, r24
    17d0:	71 f3       	breq	.-36     	; 0x17ae <KPD_u8GetState+0xa4>
					{
					DIO_u8GetPinVale(KPD_u8_COLS_PORT,Local_Au8ColsPinArr[Local_u8ColsCounter],&Local_u8PinValue);
					}
					Local_u8Flag = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	8b 83       	std	Y+3, r24	; 0x03
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <KPD_u8GetState+0xdc>
		for(u8 Local_u8RowCounter=0; Local_u8RowCounter<KPD_u8_ROWS_NB ;Local_u8RowCounter++)
		{
			/* Activate Each Row */
			DIO_u8SetPinVale(KPD_u8_ROWS_PORT,Local_Au8RowsPinArr[Local_u8RowCounter], DIO_u8_LOW);
			/* Loop To Check Cols Pins */
			for(u8 Local_u8ColsCounter = 0; Local_u8ColsCounter<KPD_u8_COLS_NB; Local_u8ColsCounter++)
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	08 f4       	brcc	.+2      	; 0x17e6 <KPD_u8GetState+0xdc>
    17e4:	ba cf       	rjmp	.-140    	; 0x175a <KPD_u8GetState+0x50>
					break;
					}
				
			}
			/* Deactivate The Current Row */
			DIO_u8SetPinVale(KPD_u8_ROWS_PORT,Local_Au8RowsPinArr[Local_u8RowCounter], DIO_u8_HIGH);
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	88 2f       	mov	r24, r24
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	fc 01       	movw	r30, r24
    17ee:	e4 57       	subi	r30, 0x74	; 116
    17f0:	fe 4f       	sbci	r31, 0xFE	; 254
    17f2:	90 81       	ld	r25, Z
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	69 2f       	mov	r22, r25
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
			if(Local_u8Flag==1)
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	49 f0       	breq	.+18     	; 0x1816 <KPD_u8GetState+0x10c>
	static u8 Local_Au8ColsPinArr[KPD_u8_COLS_NB]=KPD_ROWS_PIN; // static to add it to .data withouth pushing in stack every calling
	static Local_Au8KPDValues[KPD_u8_ROWS_NB][KPD_u8_COLS_NB] =KPD_KEYS;
	if(Copy_pu8ReturnedSwitch != NULL)
	{
		*Copy_pu8ReturnedSwitch= KPD_u8_NOT_PRESSED;
		for(u8 Local_u8RowCounter=0; Local_u8RowCounter<KPD_u8_ROWS_NB ;Local_u8RowCounter++)
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	8f 5f       	subi	r24, 0xFF	; 255
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	84 30       	cpi	r24, 0x04	; 4
    180e:	08 f4       	brcc	.+2      	; 0x1812 <KPD_u8GetState+0x108>
    1810:	96 cf       	rjmp	.-212    	; 0x173e <KPD_u8GetState+0x34>
    1812:	01 c0       	rjmp	.+2      	; 0x1816 <KPD_u8GetState+0x10c>

		}
	}
	else
	{
		Local_u8ReturnState=STD_TYPES_NOK;
    1814:	1c 82       	std	Y+4, r1	; 0x04
	}
	return Local_u8ReturnState;
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1818:	27 96       	adiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <LCD_voidInit>:
#include "LCD_config.h"

u32 ArrNumb[10];

void LCD_voidInit			(void)
{
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	ca 55       	subi	r28, 0x5A	; 90
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	fe 01       	movw	r30, r28
    1846:	e9 5a       	subi	r30, 0xA9	; 169
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	ac e0       	ldi	r26, 0x0C	; 12
    1850:	b2 e4       	ldi	r27, 0x42	; 66
    1852:	80 83       	st	Z, r24
    1854:	91 83       	std	Z+1, r25	; 0x01
    1856:	a2 83       	std	Z+2, r26	; 0x02
    1858:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185a:	8e 01       	movw	r16, r28
    185c:	0d 5a       	subi	r16, 0xAD	; 173
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	fe 01       	movw	r30, r28
    1862:	e9 5a       	subi	r30, 0xA9	; 169
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	60 81       	ld	r22, Z
    1868:	71 81       	ldd	r23, Z+1	; 0x01
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	4a e7       	ldi	r20, 0x7A	; 122
    1874:	55 e4       	ldi	r21, 0x45	; 69
    1876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	f8 01       	movw	r30, r16
    1880:	80 83       	st	Z, r24
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	a2 83       	std	Z+2, r26	; 0x02
    1886:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1888:	fe 01       	movw	r30, r28
    188a:	ed 5a       	subi	r30, 0xAD	; 173
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	60 81       	ld	r22, Z
    1890:	71 81       	ldd	r23, Z+1	; 0x01
    1892:	82 81       	ldd	r24, Z+2	; 0x02
    1894:	93 81       	ldd	r25, Z+3	; 0x03
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e8       	ldi	r20, 0x80	; 128
    189c:	5f e3       	ldi	r21, 0x3F	; 63
    189e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    18a2:	88 23       	and	r24, r24
    18a4:	44 f4       	brge	.+16     	; 0x18b6 <LCD_voidInit+0x8c>
		__ticks = 1;
    18a6:	fe 01       	movw	r30, r28
    18a8:	ef 5a       	subi	r30, 0xAF	; 175
    18aa:	ff 4f       	sbci	r31, 0xFF	; 255
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24
    18b4:	64 c0       	rjmp	.+200    	; 0x197e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    18b6:	fe 01       	movw	r30, r28
    18b8:	ed 5a       	subi	r30, 0xAD	; 173
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	60 81       	ld	r22, Z
    18be:	71 81       	ldd	r23, Z+1	; 0x01
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	3f ef       	ldi	r19, 0xFF	; 255
    18c8:	4f e7       	ldi	r20, 0x7F	; 127
    18ca:	57 e4       	ldi	r21, 0x47	; 71
    18cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    18d0:	18 16       	cp	r1, r24
    18d2:	0c f0       	brlt	.+2      	; 0x18d6 <LCD_voidInit+0xac>
    18d4:	43 c0       	rjmp	.+134    	; 0x195c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	fe 01       	movw	r30, r28
    18d8:	e9 5a       	subi	r30, 0xA9	; 169
    18da:	ff 4f       	sbci	r31, 0xFF	; 255
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e2       	ldi	r20, 0x20	; 32
    18ea:	51 e4       	ldi	r21, 0x41	; 65
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8e 01       	movw	r16, r28
    18f6:	0f 5a       	subi	r16, 0xAF	; 175
    18f8:	1f 4f       	sbci	r17, 0xFF	; 255
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	f8 01       	movw	r30, r16
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	80 83       	st	Z, r24
    190c:	1f c0       	rjmp	.+62     	; 0x194c <LCD_voidInit+0x122>
    190e:	fe 01       	movw	r30, r28
    1910:	e1 5b       	subi	r30, 0xB1	; 177
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 e9       	ldi	r24, 0x90	; 144
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191c:	fe 01       	movw	r30, r28
    191e:	e1 5b       	subi	r30, 0xB1	; 177
    1920:	ff 4f       	sbci	r31, 0xFF	; 255
    1922:	80 81       	ld	r24, Z
    1924:	91 81       	ldd	r25, Z+1	; 0x01
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_voidInit+0xfc>
    192a:	fe 01       	movw	r30, r28
    192c:	e1 5b       	subi	r30, 0xB1	; 177
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	91 83       	std	Z+1, r25	; 0x01
    1932:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1934:	de 01       	movw	r26, r28
    1936:	af 5a       	subi	r26, 0xAF	; 175
    1938:	bf 4f       	sbci	r27, 0xFF	; 255
    193a:	fe 01       	movw	r30, r28
    193c:	ef 5a       	subi	r30, 0xAF	; 175
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	9c 93       	st	X, r25
    194a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194c:	fe 01       	movw	r30, r28
    194e:	ef 5a       	subi	r30, 0xAF	; 175
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	80 81       	ld	r24, Z
    1954:	91 81       	ldd	r25, Z+1	; 0x01
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	d1 f6       	brne	.-76     	; 0x190e <LCD_voidInit+0xe4>
    195a:	27 c0       	rjmp	.+78     	; 0x19aa <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	8e 01       	movw	r16, r28
    195e:	0f 5a       	subi	r16, 0xAF	; 175
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	fe 01       	movw	r30, r28
    1964:	ed 5a       	subi	r30, 0xAD	; 173
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	f8 01       	movw	r30, r16
    197a:	91 83       	std	Z+1, r25	; 0x01
    197c:	80 83       	st	Z, r24
    197e:	de 01       	movw	r26, r28
    1980:	a3 5b       	subi	r26, 0xB3	; 179
    1982:	bf 4f       	sbci	r27, 0xFF	; 255
    1984:	fe 01       	movw	r30, r28
    1986:	ef 5a       	subi	r30, 0xAF	; 175
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	80 81       	ld	r24, Z
    198c:	91 81       	ldd	r25, Z+1	; 0x01
    198e:	8d 93       	st	X+, r24
    1990:	9c 93       	st	X, r25
    1992:	fe 01       	movw	r30, r28
    1994:	e3 5b       	subi	r30, 0xB3	; 179
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	91 81       	ldd	r25, Z+1	; 0x01
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	f1 f7       	brne	.-4      	; 0x199c <LCD_voidInit+0x172>
    19a0:	fe 01       	movw	r30, r28
    19a2:	e3 5b       	subi	r30, 0xB3	; 179
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_u8_MODE == LCD_u_8_BIT_MODE
	/* Function Send Cmnd  */
	LCD_voidSendCmnd(0b00111000); // as data sheet
#elif LCD_u8_MODE == LCD_u_4_BIT_MODE
	DIO_u8SetPinVale(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>

	DIO_u8SetPinVale(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	40 e0       	ldi	r20, 0x00	; 0
    19ba:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	Private_voidWriteHalfPort(0b0010);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	0e 94 24 13 	call	0x2648	; 0x2648 <Private_voidWriteHalfPort>
	
	/*Enable Pulse */
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e7 5b       	subi	r30, 0xB7	; 183
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e8       	ldi	r26, 0x80	; 128
    19da:	bf e3       	ldi	r27, 0x3F	; 63
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	8e 01       	movw	r16, r28
    19e6:	0b 5b       	subi	r16, 0xBB	; 187
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5b       	subi	r30, 0xB7	; 183
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a e7       	ldi	r20, 0x7A	; 122
    19fe:	55 e4       	ldi	r21, 0x45	; 69
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a12:	fe 01       	movw	r30, r28
    1a14:	eb 5b       	subi	r30, 0xBB	; 187
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	44 f4       	brge	.+16     	; 0x1a40 <LCD_voidInit+0x216>
		__ticks = 1;
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 5b       	subi	r30, 0xBD	; 189
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	64 c0       	rjmp	.+200    	; 0x1b08 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    1a40:	fe 01       	movw	r30, r28
    1a42:	eb 5b       	subi	r30, 0xBB	; 187
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	0c f0       	brlt	.+2      	; 0x1a60 <LCD_voidInit+0x236>
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <LCD_voidInit+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5b       	subi	r30, 0xB7	; 183
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8e 01       	movw	r16, r28
    1a80:	0d 5b       	subi	r16, 0xBD	; 189
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	1f c0       	rjmp	.+62     	; 0x1ad6 <LCD_voidInit+0x2ac>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5b       	subi	r30, 0xBF	; 191
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 e9       	ldi	r24, 0x90	; 144
    1aa0:	91 e0       	ldi	r25, 0x01	; 1
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ef 5b       	subi	r30, 0xBF	; 191
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_voidInit+0x286>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5b       	subi	r30, 0xBF	; 191
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	de 01       	movw	r26, r28
    1ac0:	ad 5b       	subi	r26, 0xBD	; 189
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ed 5b       	subi	r30, 0xBD	; 189
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 5b       	subi	r30, 0xBD	; 189
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d1 f6       	brne	.-76     	; 0x1a98 <LCD_voidInit+0x26e>
    1ae4:	24 c0       	rjmp	.+72     	; 0x1b2e <LCD_voidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	0d 5b       	subi	r16, 0xBD	; 189
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	eb 5b       	subi	r30, 0xBB	; 187
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	fe 01       	movw	r30, r28
    1b14:	ff 96       	adiw	r30, 0x3f	; 63
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ff 96       	adiw	r30, 0x3f	; 63
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_voidInit+0x2f8>
    1b26:	fe 01       	movw	r30, r28
    1b28:	ff 96       	adiw	r30, 0x3f	; 63
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	62 e0       	ldi	r22, 0x02	; 2
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	LCD_voidSendCmnd(0b00101000);
    1b38:	88 e2       	ldi	r24, 0x28	; 40
    1b3a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a4 e3       	ldi	r26, 0x34	; 52
    1b44:	b2 e4       	ldi	r27, 0x42	; 66
    1b46:	8b af       	std	Y+59, r24	; 0x3b
    1b48:	9c af       	std	Y+60, r25	; 0x3c
    1b4a:	ad af       	std	Y+61, r26	; 0x3d
    1b4c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b4e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b50:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b56:	2b ea       	ldi	r18, 0xAB	; 171
    1b58:	3a ea       	ldi	r19, 0xAA	; 170
    1b5a:	4a ea       	ldi	r20, 0xAA	; 170
    1b5c:	50 e4       	ldi	r21, 0x40	; 64
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8f ab       	std	Y+55, r24	; 0x37
    1b68:	98 af       	std	Y+56, r25	; 0x38
    1b6a:	a9 af       	std	Y+57, r26	; 0x39
    1b6c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b6e:	6f a9       	ldd	r22, Y+55	; 0x37
    1b70:	78 ad       	ldd	r23, Y+56	; 0x38
    1b72:	89 ad       	ldd	r24, Y+57	; 0x39
    1b74:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	1c f4       	brge	.+6      	; 0x1b8c <LCD_voidInit+0x362>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	8e ab       	std	Y+54, r24	; 0x36
    1b8a:	91 c0       	rjmp	.+290    	; 0x1cae <LCD_voidInit+0x484>
	else if (__tmp > 255)
    1b8c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b8e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b90:	89 ad       	ldd	r24, Y+57	; 0x39
    1b92:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	0c f0       	brlt	.+2      	; 0x1ba6 <LCD_voidInit+0x37c>
    1ba4:	7b c0       	rjmp	.+246    	; 0x1c9c <LCD_voidInit+0x472>
	{
		_delay_ms(__us / 1000.0);
    1ba6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ba8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1baa:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bac:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a e7       	ldi	r20, 0x7A	; 122
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8a ab       	std	Y+50, r24	; 0x32
    1bc0:	9b ab       	std	Y+51, r25	; 0x33
    1bc2:	ac ab       	std	Y+52, r26	; 0x34
    1bc4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc6:	6a a9       	ldd	r22, Y+50	; 0x32
    1bc8:	7b a9       	ldd	r23, Y+51	; 0x33
    1bca:	8c a9       	ldd	r24, Y+52	; 0x34
    1bcc:	9d a9       	ldd	r25, Y+53	; 0x35
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	4a e7       	ldi	r20, 0x7A	; 122
    1bd4:	55 e4       	ldi	r21, 0x45	; 69
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	8e a7       	std	Y+46, r24	; 0x2e
    1be0:	9f a7       	std	Y+47, r25	; 0x2f
    1be2:	a8 ab       	std	Y+48, r26	; 0x30
    1be4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1be6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1be8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1bea:	88 a9       	ldd	r24, Y+48	; 0x30
    1bec:	99 a9       	ldd	r25, Y+49	; 0x31
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e8       	ldi	r20, 0x80	; 128
    1bf4:	5f e3       	ldi	r21, 0x3F	; 63
    1bf6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1bfa:	88 23       	and	r24, r24
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <LCD_voidInit+0x3de>
		__ticks = 1;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9d a7       	std	Y+45, r25	; 0x2d
    1c04:	8c a7       	std	Y+44, r24	; 0x2c
    1c06:	3f c0       	rjmp	.+126    	; 0x1c86 <LCD_voidInit+0x45c>
	else if (__tmp > 65535)
    1c08:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c0a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c0c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c0e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	3f ef       	ldi	r19, 0xFF	; 255
    1c14:	4f e7       	ldi	r20, 0x7F	; 127
    1c16:	57 e4       	ldi	r21, 0x47	; 71
    1c18:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c1c:	18 16       	cp	r1, r24
    1c1e:	4c f5       	brge	.+82     	; 0x1c72 <LCD_voidInit+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c20:	6a a9       	ldd	r22, Y+50	; 0x32
    1c22:	7b a9       	ldd	r23, Y+51	; 0x33
    1c24:	8c a9       	ldd	r24, Y+52	; 0x34
    1c26:	9d a9       	ldd	r25, Y+53	; 0x35
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 e2       	ldi	r20, 0x20	; 32
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	bc 01       	movw	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	9d a7       	std	Y+45, r25	; 0x2d
    1c46:	8c a7       	std	Y+44, r24	; 0x2c
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <LCD_voidInit+0x43e>
    1c4a:	80 e9       	ldi	r24, 0x90	; 144
    1c4c:	91 e0       	ldi	r25, 0x01	; 1
    1c4e:	9b a7       	std	Y+43, r25	; 0x2b
    1c50:	8a a7       	std	Y+42, r24	; 0x2a
    1c52:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c54:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <LCD_voidInit+0x42c>
    1c5a:	9b a7       	std	Y+43, r25	; 0x2b
    1c5c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	9d a7       	std	Y+45, r25	; 0x2d
    1c66:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c68:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c6a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c6c:	00 97       	sbiw	r24, 0x00	; 0
    1c6e:	69 f7       	brne	.-38     	; 0x1c4a <LCD_voidInit+0x420>
    1c70:	24 c0       	rjmp	.+72     	; 0x1cba <LCD_voidInit+0x490>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c72:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c74:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c76:	88 a9       	ldd	r24, Y+48	; 0x30
    1c78:	99 a9       	ldd	r25, Y+49	; 0x31
    1c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	9d a7       	std	Y+45, r25	; 0x2d
    1c84:	8c a7       	std	Y+44, r24	; 0x2c
    1c86:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c88:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c8a:	99 a7       	std	Y+41, r25	; 0x29
    1c8c:	88 a7       	std	Y+40, r24	; 0x28
    1c8e:	88 a5       	ldd	r24, Y+40	; 0x28
    1c90:	99 a5       	ldd	r25, Y+41	; 0x29
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <LCD_voidInit+0x468>
    1c96:	99 a7       	std	Y+41, r25	; 0x29
    1c98:	88 a7       	std	Y+40, r24	; 0x28
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <LCD_voidInit+0x490>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c9c:	6f a9       	ldd	r22, Y+55	; 0x37
    1c9e:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8e ab       	std	Y+54, r24	; 0x36
    1cae:	8e a9       	ldd	r24, Y+54	; 0x36
    1cb0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb2:	8f a1       	ldd	r24, Y+39	; 0x27
    1cb4:	8a 95       	dec	r24
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <LCD_voidInit+0x48a>
    1cb8:	8f a3       	std	Y+39, r24	; 0x27
#endif

	_delay_us(45);
	/* Display On / OFF Control  */
	LCD_voidSendCmnd(0b00001111); 
    1cba:	8f e0       	ldi	r24, 0x0F	; 15
    1cbc:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	a4 e3       	ldi	r26, 0x34	; 52
    1cc6:	b2 e4       	ldi	r27, 0x42	; 66
    1cc8:	8b a3       	std	Y+35, r24	; 0x23
    1cca:	9c a3       	std	Y+36, r25	; 0x24
    1ccc:	ad a3       	std	Y+37, r26	; 0x25
    1cce:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd8:	2b ea       	ldi	r18, 0xAB	; 171
    1cda:	3a ea       	ldi	r19, 0xAA	; 170
    1cdc:	4a ea       	ldi	r20, 0xAA	; 170
    1cde:	50 e4       	ldi	r21, 0x40	; 64
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	8f 8f       	std	Y+31, r24	; 0x1f
    1cea:	98 a3       	std	Y+32, r25	; 0x20
    1cec:	a9 a3       	std	Y+33, r26	; 0x21
    1cee:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1cf0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cf2:	78 a1       	ldd	r23, Y+32	; 0x20
    1cf4:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf6:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	40 e8       	ldi	r20, 0x80	; 128
    1cfe:	5f e3       	ldi	r21, 0x3F	; 63
    1d00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d04:	88 23       	and	r24, r24
    1d06:	1c f4       	brge	.+6      	; 0x1d0e <LCD_voidInit+0x4e4>
		__ticks = 1;
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1d0c:	91 c0       	rjmp	.+290    	; 0x1e30 <LCD_voidInit+0x606>
	else if (__tmp > 255)
    1d0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d10:	78 a1       	ldd	r23, Y+32	; 0x20
    1d12:	89 a1       	ldd	r24, Y+33	; 0x21
    1d14:	9a a1       	ldd	r25, Y+34	; 0x22
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	53 e4       	ldi	r21, 0x43	; 67
    1d1e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	0c f0       	brlt	.+2      	; 0x1d28 <LCD_voidInit+0x4fe>
    1d26:	7b c0       	rjmp	.+246    	; 0x1e1e <LCD_voidInit+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    1d28:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	4a e7       	ldi	r20, 0x7A	; 122
    1d36:	54 e4       	ldi	r21, 0x44	; 68
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	8a 8f       	std	Y+26, r24	; 0x1a
    1d42:	9b 8f       	std	Y+27, r25	; 0x1b
    1d44:	ac 8f       	std	Y+28, r26	; 0x1c
    1d46:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d4a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	55 e4       	ldi	r21, 0x45	; 69
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8e 8b       	std	Y+22, r24	; 0x16
    1d62:	9f 8b       	std	Y+23, r25	; 0x17
    1d64:	a8 8f       	std	Y+24, r26	; 0x18
    1d66:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d68:	6e 89       	ldd	r22, Y+22	; 0x16
    1d6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_voidInit+0x560>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9d 8b       	std	Y+21, r25	; 0x15
    1d86:	8c 8b       	std	Y+20, r24	; 0x14
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_voidInit+0x5de>
	else if (__tmp > 65535)
    1d8a:	6e 89       	ldd	r22, Y+22	; 0x16
    1d8c:	7f 89       	ldd	r23, Y+23	; 0x17
    1d8e:	88 8d       	ldd	r24, Y+24	; 0x18
    1d90:	99 8d       	ldd	r25, Y+25	; 0x19
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_voidInit+0x5ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1da4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1da6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1da8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9d 8b       	std	Y+21, r25	; 0x15
    1dc8:	8c 8b       	std	Y+20, r24	; 0x14
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_voidInit+0x5c0>
    1dcc:	80 e9       	ldi	r24, 0x90	; 144
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	9b 8b       	std	Y+19, r25	; 0x13
    1dd2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dd4:	8a 89       	ldd	r24, Y+18	; 0x12
    1dd6:	9b 89       	ldd	r25, Y+19	; 0x13
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_voidInit+0x5ae>
    1ddc:	9b 8b       	std	Y+19, r25	; 0x13
    1dde:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	8c 89       	ldd	r24, Y+20	; 0x14
    1de2:	9d 89       	ldd	r25, Y+21	; 0x15
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9d 8b       	std	Y+21, r25	; 0x15
    1de8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	8c 89       	ldd	r24, Y+20	; 0x14
    1dec:	9d 89       	ldd	r25, Y+21	; 0x15
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_voidInit+0x5a2>
    1df2:	24 c0       	rjmp	.+72     	; 0x1e3c <LCD_voidInit+0x612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6e 89       	ldd	r22, Y+22	; 0x16
    1df6:	7f 89       	ldd	r23, Y+23	; 0x17
    1df8:	88 8d       	ldd	r24, Y+24	; 0x18
    1dfa:	99 8d       	ldd	r25, Y+25	; 0x19
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9d 8b       	std	Y+21, r25	; 0x15
    1e06:	8c 8b       	std	Y+20, r24	; 0x14
    1e08:	8c 89       	ldd	r24, Y+20	; 0x14
    1e0a:	9d 89       	ldd	r25, Y+21	; 0x15
    1e0c:	99 8b       	std	Y+17, r25	; 0x11
    1e0e:	88 8b       	std	Y+16, r24	; 0x10
    1e10:	88 89       	ldd	r24, Y+16	; 0x10
    1e12:	99 89       	ldd	r25, Y+17	; 0x11
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_voidInit+0x5ea>
    1e18:	99 8b       	std	Y+17, r25	; 0x11
    1e1a:	88 8b       	std	Y+16, r24	; 0x10
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <LCD_voidInit+0x612>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e1e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e20:	78 a1       	ldd	r23, Y+32	; 0x20
    1e22:	89 a1       	ldd	r24, Y+33	; 0x21
    1e24:	9a a1       	ldd	r25, Y+34	; 0x22
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e30:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e32:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e36:	8a 95       	dec	r24
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_voidInit+0x60c>
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	/* Display Clear */
	LCD_voidSendCmnd(0b00000001); 
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e0       	ldi	r26, 0x00	; 0
    1e48:	b0 e4       	ldi	r27, 0x40	; 64
    1e4a:	8b 87       	std	Y+11, r24	; 0x0b
    1e4c:	9c 87       	std	Y+12, r25	; 0x0c
    1e4e:	ad 87       	std	Y+13, r26	; 0x0d
    1e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a e7       	ldi	r20, 0x7A	; 122
    1e60:	55 e4       	ldi	r21, 0x45	; 69
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	8f 83       	std	Y+7, r24	; 0x07
    1e6c:	98 87       	std	Y+8, r25	; 0x08
    1e6e:	a9 87       	std	Y+9, r26	; 0x09
    1e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e72:	6f 81       	ldd	r22, Y+7	; 0x07
    1e74:	78 85       	ldd	r23, Y+8	; 0x08
    1e76:	89 85       	ldd	r24, Y+9	; 0x09
    1e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <LCD_voidInit+0x66a>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9e 83       	std	Y+6, r25	; 0x06
    1e90:	8d 83       	std	Y+5, r24	; 0x05
    1e92:	3f c0       	rjmp	.+126    	; 0x1f12 <LCD_voidInit+0x6e8>
	else if (__tmp > 65535)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	4c f5       	brge	.+82     	; 0x1efe <LCD_voidInit+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <LCD_voidInit+0x6ca>
    1ed6:	80 e9       	ldi	r24, 0x90	; 144
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
    1eda:	9c 83       	std	Y+4, r25	; 0x04
    1edc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_voidInit+0x6b8>
    1ee6:	9c 83       	std	Y+4, r25	; 0x04
    1ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <LCD_voidInit+0x6ac>
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <LCD_voidInit+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	9e 83       	std	Y+6, r25	; 0x06
    1f10:	8d 83       	std	Y+5, r24	; 0x05
    1f12:	8d 81       	ldd	r24, Y+5	; 0x05
    1f14:	9e 81       	ldd	r25, Y+6	; 0x06
    1f16:	9a 83       	std	Y+2, r25	; 0x02
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_voidInit+0x6f4>
    1f22:	9a 83       	std	Y+2, r25	; 0x02
    1f24:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/* Entery Mode Set */
	LCD_voidSendCmnd(0b00000110); 
    1f26:	86 e0       	ldi	r24, 0x06	; 6
    1f28:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>


}
    1f2c:	c6 5a       	subi	r28, 0xA6	; 166
    1f2e:	df 4f       	sbci	r29, 0xFF	; 255
    1f30:	0f b6       	in	r0, 0x3f	; 63
    1f32:	f8 94       	cli
    1f34:	de bf       	out	0x3e, r29	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	cd bf       	out	0x3d, r28	; 61
    1f3a:	cf 91       	pop	r28
    1f3c:	df 91       	pop	r29
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret

00001f44 <LCD_voidSendCmnd>:
void LCD_voidSendCmnd 	    (u8 Copy_u8Cmnd)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	6d 97       	sbiw	r28, 0x1d	; 29
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	de bf       	out	0x3e, r29	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	cd bf       	out	0x3d, r28	; 61
    1f58:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8SetPinVale(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
#elif LCD_u8_MODE == LCD_u_4_BIT_MODE
	/* Rs pin = 0 */
	DIO_u8SetPinVale(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	61 e0       	ldi	r22, 0x01	; 1
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	/* Rw pin = 0 */
	DIO_u8SetPinVale(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	/* Send To LCD MOST 4 BITs */
	Private_voidWriteHalfPort(Copy_u8Cmnd>>4);
    1f6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f70:	82 95       	swap	r24
    1f72:	8f 70       	andi	r24, 0x0F	; 15
    1f74:	0e 94 24 13 	call	0x2648	; 0x2648 <Private_voidWriteHalfPort>
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	62 e0       	ldi	r22, 0x02	; 2
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	a0 e8       	ldi	r26, 0x80	; 128
    1f88:	bf e3       	ldi	r27, 0x3F	; 63
    1f8a:	89 8f       	std	Y+25, r24	; 0x19
    1f8c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f8e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f92:	69 8d       	ldd	r22, Y+25	; 0x19
    1f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	4a e7       	ldi	r20, 0x7A	; 122
    1fa0:	55 e4       	ldi	r21, 0x45	; 69
    1fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	8d 8b       	std	Y+21, r24	; 0x15
    1fac:	9e 8b       	std	Y+22, r25	; 0x16
    1fae:	af 8b       	std	Y+23, r26	; 0x17
    1fb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e8       	ldi	r20, 0x80	; 128
    1fc0:	5f e3       	ldi	r21, 0x3F	; 63
    1fc2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fc6:	88 23       	and	r24, r24
    1fc8:	2c f4       	brge	.+10     	; 0x1fd4 <LCD_voidSendCmnd+0x90>
		__ticks = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	3f c0       	rjmp	.+126    	; 0x2052 <LCD_voidSendCmnd+0x10e>
	else if (__tmp > 65535)
    1fd4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fda:	98 8d       	ldd	r25, Y+24	; 0x18
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	3f ef       	ldi	r19, 0xFF	; 255
    1fe0:	4f e7       	ldi	r20, 0x7F	; 127
    1fe2:	57 e4       	ldi	r21, 0x47	; 71
    1fe4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	4c f5       	brge	.+82     	; 0x203e <LCD_voidSendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fec:	69 8d       	ldd	r22, Y+25	; 0x19
    1fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	40 e2       	ldi	r20, 0x20	; 32
    1ffa:	51 e4       	ldi	r21, 0x41	; 65
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	bc 01       	movw	r22, r24
    2006:	cd 01       	movw	r24, r26
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9c 8b       	std	Y+20, r25	; 0x14
    2012:	8b 8b       	std	Y+19, r24	; 0x13
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <LCD_voidSendCmnd+0xf0>
    2016:	80 e9       	ldi	r24, 0x90	; 144
    2018:	91 e0       	ldi	r25, 0x01	; 1
    201a:	9a 8b       	std	Y+18, r25	; 0x12
    201c:	89 8b       	std	Y+17, r24	; 0x11
    201e:	89 89       	ldd	r24, Y+17	; 0x11
    2020:	9a 89       	ldd	r25, Y+18	; 0x12
    2022:	01 97       	sbiw	r24, 0x01	; 1
    2024:	f1 f7       	brne	.-4      	; 0x2022 <LCD_voidSendCmnd+0xde>
    2026:	9a 8b       	std	Y+18, r25	; 0x12
    2028:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202a:	8b 89       	ldd	r24, Y+19	; 0x13
    202c:	9c 89       	ldd	r25, Y+20	; 0x14
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	9c 8b       	std	Y+20, r25	; 0x14
    2032:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2034:	8b 89       	ldd	r24, Y+19	; 0x13
    2036:	9c 89       	ldd	r25, Y+20	; 0x14
    2038:	00 97       	sbiw	r24, 0x00	; 0
    203a:	69 f7       	brne	.-38     	; 0x2016 <LCD_voidSendCmnd+0xd2>
    203c:	14 c0       	rjmp	.+40     	; 0x2066 <LCD_voidSendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203e:	6d 89       	ldd	r22, Y+21	; 0x15
    2040:	7e 89       	ldd	r23, Y+22	; 0x16
    2042:	8f 89       	ldd	r24, Y+23	; 0x17
    2044:	98 8d       	ldd	r25, Y+24	; 0x18
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	8b 89       	ldd	r24, Y+19	; 0x13
    2054:	9c 89       	ldd	r25, Y+20	; 0x14
    2056:	98 8b       	std	Y+16, r25	; 0x10
    2058:	8f 87       	std	Y+15, r24	; 0x0f
    205a:	8f 85       	ldd	r24, Y+15	; 0x0f
    205c:	98 89       	ldd	r25, Y+16	; 0x10
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_voidSendCmnd+0x11a>
    2062:	98 8b       	std	Y+16, r25	; 0x10
    2064:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	62 e0       	ldi	r22, 0x02	; 2
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	
	/* Send To LCD Lease 4 BITs of the cmnd */
	Private_voidWriteHalfPort(Copy_u8Cmnd);
    2070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2072:	0e 94 24 13 	call	0x2648	; 0x2648 <Private_voidWriteHalfPort>
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	a0 e8       	ldi	r26, 0x80	; 128
    2086:	bf e3       	ldi	r27, 0x3F	; 63
    2088:	8b 87       	std	Y+11, r24	; 0x0b
    208a:	9c 87       	std	Y+12, r25	; 0x0c
    208c:	ad 87       	std	Y+13, r26	; 0x0d
    208e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2090:	6b 85       	ldd	r22, Y+11	; 0x0b
    2092:	7c 85       	ldd	r23, Y+12	; 0x0c
    2094:	8d 85       	ldd	r24, Y+13	; 0x0d
    2096:	9e 85       	ldd	r25, Y+14	; 0x0e
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	4a e7       	ldi	r20, 0x7A	; 122
    209e:	55 e4       	ldi	r21, 0x45	; 69
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	8f 83       	std	Y+7, r24	; 0x07
    20aa:	98 87       	std	Y+8, r25	; 0x08
    20ac:	a9 87       	std	Y+9, r26	; 0x09
    20ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b0:	6f 81       	ldd	r22, Y+7	; 0x07
    20b2:	78 85       	ldd	r23, Y+8	; 0x08
    20b4:	89 85       	ldd	r24, Y+9	; 0x09
    20b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e8       	ldi	r20, 0x80	; 128
    20be:	5f e3       	ldi	r21, 0x3F	; 63
    20c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20c4:	88 23       	and	r24, r24
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <LCD_voidSendCmnd+0x18e>
		__ticks = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9e 83       	std	Y+6, r25	; 0x06
    20ce:	8d 83       	std	Y+5, r24	; 0x05
    20d0:	3f c0       	rjmp	.+126    	; 0x2150 <LCD_voidSendCmnd+0x20c>
	else if (__tmp > 65535)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	3f ef       	ldi	r19, 0xFF	; 255
    20de:	4f e7       	ldi	r20, 0x7F	; 127
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20e6:	18 16       	cp	r1, r24
    20e8:	4c f5       	brge	.+82     	; 0x213c <LCD_voidSendCmnd+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e2       	ldi	r20, 0x20	; 32
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	8d 83       	std	Y+5, r24	; 0x05
    2112:	0f c0       	rjmp	.+30     	; 0x2132 <LCD_voidSendCmnd+0x1ee>
    2114:	80 e9       	ldi	r24, 0x90	; 144
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f1 f7       	brne	.-4      	; 0x2120 <LCD_voidSendCmnd+0x1dc>
    2124:	9c 83       	std	Y+4, r25	; 0x04
    2126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	9e 83       	std	Y+6, r25	; 0x06
    2130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2132:	8d 81       	ldd	r24, Y+5	; 0x05
    2134:	9e 81       	ldd	r25, Y+6	; 0x06
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	69 f7       	brne	.-38     	; 0x2114 <LCD_voidSendCmnd+0x1d0>
    213a:	14 c0       	rjmp	.+40     	; 0x2164 <LCD_voidSendCmnd+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	8d 81       	ldd	r24, Y+5	; 0x05
    2152:	9e 81       	ldd	r25, Y+6	; 0x06
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	9a 81       	ldd	r25, Y+2	; 0x02
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCD_voidSendCmnd+0x218>
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	62 e0       	ldi	r22, 0x02	; 2
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
#endif
}
    216e:	6d 96       	adiw	r28, 0x1d	; 29
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <LCD_voidSendChar>:
void LCD_voidSendChar		(u8 Copy_u8Char)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	6d 97       	sbiw	r28, 0x1d	; 29
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
	
#elif LCD_u8_MODE == LCD_u_4_BIT_MODE
/* Rs pin = 0 */
	DIO_u8SetPinVale(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	61 e0       	ldi	r22, 0x01	; 1
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	/* Rw pin = 0 */
	DIO_u8SetPinVale(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	60 e0       	ldi	r22, 0x00	; 0
    21a4:	40 e0       	ldi	r20, 0x00	; 0
    21a6:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	/* Send To LCD MOST 4 BITs */
	Private_voidWriteHalfPort(Copy_u8Char>>4);
    21aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ac:	82 95       	swap	r24
    21ae:	8f 70       	andi	r24, 0x0F	; 15
    21b0:	0e 94 24 13 	call	0x2648	; 0x2648 <Private_voidWriteHalfPort>
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	62 e0       	ldi	r22, 0x02	; 2
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e8       	ldi	r26, 0x80	; 128
    21c4:	bf e3       	ldi	r27, 0x3F	; 63
    21c6:	89 8f       	std	Y+25, r24	; 0x19
    21c8:	9a 8f       	std	Y+26, r25	; 0x1a
    21ca:	ab 8f       	std	Y+27, r26	; 0x1b
    21cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	69 8d       	ldd	r22, Y+25	; 0x19
    21d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a e7       	ldi	r20, 0x7A	; 122
    21dc:	55 e4       	ldi	r21, 0x45	; 69
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8d 8b       	std	Y+21, r24	; 0x15
    21e8:	9e 8b       	std	Y+22, r25	; 0x16
    21ea:	af 8b       	std	Y+23, r26	; 0x17
    21ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <LCD_voidSendChar+0x90>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	3f c0       	rjmp	.+126    	; 0x228e <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	69 8d       	ldd	r22, Y+25	; 0x19
    222a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    222e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <LCD_voidSendChar+0xf0>
    2252:	80 e9       	ldi	r24, 0x90	; 144
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	9a 8b       	std	Y+18, r25	; 0x12
    2258:	89 8b       	std	Y+17, r24	; 0x11
    225a:	89 89       	ldd	r24, Y+17	; 0x11
    225c:	9a 89       	ldd	r25, Y+18	; 0x12
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_voidSendChar+0xde>
    2262:	9a 8b       	std	Y+18, r25	; 0x12
    2264:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8b 89       	ldd	r24, Y+19	; 0x13
    2268:	9c 89       	ldd	r25, Y+20	; 0x14
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9c 8b       	std	Y+20, r25	; 0x14
    226e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8b 89       	ldd	r24, Y+19	; 0x13
    2272:	9c 89       	ldd	r25, Y+20	; 0x14
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <LCD_voidSendChar+0xd2>
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	6d 89       	ldd	r22, Y+21	; 0x15
    227c:	7e 89       	ldd	r23, Y+22	; 0x16
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	98 8b       	std	Y+16, r25	; 0x10
    2294:	8f 87       	std	Y+15, r24	; 0x0f
    2296:	8f 85       	ldd	r24, Y+15	; 0x0f
    2298:	98 89       	ldd	r25, Y+16	; 0x10
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <LCD_voidSendChar+0x11a>
    229e:	98 8b       	std	Y+16, r25	; 0x10
    22a0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	62 e0       	ldi	r22, 0x02	; 2
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	
	/* Send To LCD Lease 4 BITs of the cmnd */
	Private_voidWriteHalfPort(Copy_u8Char);
    22ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ae:	0e 94 24 13 	call	0x2648	; 0x2648 <Private_voidWriteHalfPort>
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	62 e0       	ldi	r22, 0x02	; 2
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	a0 e8       	ldi	r26, 0x80	; 128
    22c2:	bf e3       	ldi	r27, 0x3F	; 63
    22c4:	8b 87       	std	Y+11, r24	; 0x0b
    22c6:	9c 87       	std	Y+12, r25	; 0x0c
    22c8:	ad 87       	std	Y+13, r26	; 0x0d
    22ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4a e7       	ldi	r20, 0x7A	; 122
    22da:	55 e4       	ldi	r21, 0x45	; 69
    22dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	8f 83       	std	Y+7, r24	; 0x07
    22e6:	98 87       	std	Y+8, r25	; 0x08
    22e8:	a9 87       	std	Y+9, r26	; 0x09
    22ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ec:	6f 81       	ldd	r22, Y+7	; 0x07
    22ee:	78 85       	ldd	r23, Y+8	; 0x08
    22f0:	89 85       	ldd	r24, Y+9	; 0x09
    22f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e8       	ldi	r20, 0x80	; 128
    22fa:	5f e3       	ldi	r21, 0x3F	; 63
    22fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2300:	88 23       	and	r24, r24
    2302:	2c f4       	brge	.+10     	; 0x230e <LCD_voidSendChar+0x18e>
		__ticks = 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9e 83       	std	Y+6, r25	; 0x06
    230a:	8d 83       	std	Y+5, r24	; 0x05
    230c:	3f c0       	rjmp	.+126    	; 0x238c <LCD_voidSendChar+0x20c>
	else if (__tmp > 65535)
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	3f ef       	ldi	r19, 0xFF	; 255
    231a:	4f e7       	ldi	r20, 0x7F	; 127
    231c:	57 e4       	ldi	r21, 0x47	; 71
    231e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2322:	18 16       	cp	r1, r24
    2324:	4c f5       	brge	.+82     	; 0x2378 <LCD_voidSendChar+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2326:	6b 85       	ldd	r22, Y+11	; 0x0b
    2328:	7c 85       	ldd	r23, Y+12	; 0x0c
    232a:	8d 85       	ldd	r24, Y+13	; 0x0d
    232c:	9e 85       	ldd	r25, Y+14	; 0x0e
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e2       	ldi	r20, 0x20	; 32
    2334:	51 e4       	ldi	r21, 0x41	; 65
    2336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	9e 83       	std	Y+6, r25	; 0x06
    234c:	8d 83       	std	Y+5, r24	; 0x05
    234e:	0f c0       	rjmp	.+30     	; 0x236e <LCD_voidSendChar+0x1ee>
    2350:	80 e9       	ldi	r24, 0x90	; 144
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_voidSendChar+0x1dc>
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	9e 83       	std	Y+6, r25	; 0x06
    236c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	00 97       	sbiw	r24, 0x00	; 0
    2374:	69 f7       	brne	.-38     	; 0x2350 <LCD_voidSendChar+0x1d0>
    2376:	14 c0       	rjmp	.+40     	; 0x23a0 <LCD_voidSendChar+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2378:	6f 81       	ldd	r22, Y+7	; 0x07
    237a:	78 85       	ldd	r23, Y+8	; 0x08
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9e 83       	std	Y+6, r25	; 0x06
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	8d 81       	ldd	r24, Y+5	; 0x05
    238e:	9e 81       	ldd	r25, Y+6	; 0x06
    2390:	9a 83       	std	Y+2, r25	; 0x02
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	9a 81       	ldd	r25, Y+2	; 0x02
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	f1 f7       	brne	.-4      	; 0x2398 <LCD_voidSendChar+0x218>
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_u8SetPinVale(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	62 e0       	ldi	r22, 0x02	; 2
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
#endif
}
    23aa:	6d 96       	adiw	r28, 0x1d	; 29
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	de bf       	out	0x3e, r29	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <LCD_String>:

void LCD_String	(const u8 *ptr,u8 Line_Nb ,u8 Pos)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <LCD_String+0x6>
    23c2:	00 d0       	rcall	.+0      	; 0x23c4 <LCD_String+0x8>
    23c4:	0f 92       	push	r0
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	6c 83       	std	Y+4, r22	; 0x04
    23d0:	4d 83       	std	Y+5, r20	; 0x05
	LCD_voidGoToXY(Line_Nb,Pos);
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	6d 81       	ldd	r22, Y+5	; 0x05
    23d6:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_voidGoToXY>
	for(u8 i=0; ptr[i]!='\0';i++)
    23da:	19 82       	std	Y+1, r1	; 0x01
    23dc:	0e c0       	rjmp	.+28     	; 0x23fa <LCD_String+0x3e>
	{

		LCD_voidSendChar(ptr[i]);
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	28 2f       	mov	r18, r24
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	9b 81       	ldd	r25, Y+3	; 0x03
    23e8:	fc 01       	movw	r30, r24
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	80 81       	ld	r24, Z
    23f0:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
}

void LCD_String	(const u8 *ptr,u8 Line_Nb ,u8 Pos)
{
	LCD_voidGoToXY(Line_Nb,Pos);
	for(u8 i=0; ptr[i]!='\0';i++)
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	8f 5f       	subi	r24, 0xFF	; 255
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	fc 01       	movw	r30, r24
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	80 81       	ld	r24, Z
    240c:	88 23       	and	r24, r24
    240e:	39 f7       	brne	.-50     	; 0x23de <LCD_String+0x22>

		LCD_voidSendChar(ptr[i]);

	}

}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	0f 90       	pop	r0
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	08 95       	ret

00002420 <LCD_voidSendNumber>:
void LCD_voidSendNumber(u32 Number)
{
    2420:	0f 93       	push	r16
    2422:	1f 93       	push	r17
    2424:	df 93       	push	r29
    2426:	cf 93       	push	r28
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	65 97       	sbiw	r28, 0x15	; 21
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	6a 8b       	std	Y+18, r22	; 0x12
    243a:	7b 8b       	std	Y+19, r23	; 0x13
    243c:	8c 8b       	std	Y+20, r24	; 0x14
    243e:	9d 8b       	std	Y+21, r25	; 0x15
	u8 temp;
	u8 count=0;
    2440:	18 8a       	std	Y+16, r1	; 0x10
    2442:	34 c0       	rjmp	.+104    	; 0x24ac <LCD_voidSendNumber+0x8c>
	while(Number>0)
	{
		ArrNumb[count]=Number%10;
    2444:	88 89       	ldd	r24, Y+16	; 0x10
    2446:	08 2f       	mov	r16, r24
    2448:	10 e0       	ldi	r17, 0x00	; 0
    244a:	8a 89       	ldd	r24, Y+18	; 0x12
    244c:	9b 89       	ldd	r25, Y+19	; 0x13
    244e:	ac 89       	ldd	r26, Y+20	; 0x14
    2450:	bd 89       	ldd	r27, Y+21	; 0x15
    2452:	2a e0       	ldi	r18, 0x0A	; 10
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e0       	ldi	r20, 0x00	; 0
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9c 01       	movw	r18, r24
    2468:	ad 01       	movw	r20, r26
    246a:	c8 01       	movw	r24, r16
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	fc 01       	movw	r30, r24
    2476:	e0 57       	subi	r30, 0x70	; 112
    2478:	fe 4f       	sbci	r31, 0xFE	; 254
    247a:	20 83       	st	Z, r18
    247c:	31 83       	std	Z+1, r19	; 0x01
    247e:	42 83       	std	Z+2, r20	; 0x02
    2480:	53 83       	std	Z+3, r21	; 0x03
		Number=Number/10;
    2482:	8a 89       	ldd	r24, Y+18	; 0x12
    2484:	9b 89       	ldd	r25, Y+19	; 0x13
    2486:	ac 89       	ldd	r26, Y+20	; 0x14
    2488:	bd 89       	ldd	r27, Y+21	; 0x15
    248a:	2a e0       	ldi	r18, 0x0A	; 10
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	50 e0       	ldi	r21, 0x00	; 0
    2492:	bc 01       	movw	r22, r24
    2494:	cd 01       	movw	r24, r26
    2496:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    249a:	da 01       	movw	r26, r20
    249c:	c9 01       	movw	r24, r18
    249e:	8a 8b       	std	Y+18, r24	; 0x12
    24a0:	9b 8b       	std	Y+19, r25	; 0x13
    24a2:	ac 8b       	std	Y+20, r26	; 0x14
    24a4:	bd 8b       	std	Y+21, r27	; 0x15
		count++;
    24a6:	88 89       	ldd	r24, Y+16	; 0x10
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	88 8b       	std	Y+16, r24	; 0x10
}
void LCD_voidSendNumber(u32 Number)
{
	u8 temp;
	u8 count=0;
	while(Number>0)
    24ac:	8a 89       	ldd	r24, Y+18	; 0x12
    24ae:	9b 89       	ldd	r25, Y+19	; 0x13
    24b0:	ac 89       	ldd	r26, Y+20	; 0x14
    24b2:	bd 89       	ldd	r27, Y+21	; 0x15
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	a1 05       	cpc	r26, r1
    24b8:	b1 05       	cpc	r27, r1
    24ba:	21 f6       	brne	.-120    	; 0x2444 <LCD_voidSendNumber+0x24>
	{
		ArrNumb[count]=Number%10;
		Number=Number/10;
		count++;
	}
	count--;
    24bc:	88 89       	ldd	r24, Y+16	; 0x10
    24be:	81 50       	subi	r24, 0x01	; 1
    24c0:	88 8b       	std	Y+16, r24	; 0x10
	for(s8 j=count; j>=0 ;j--)
    24c2:	88 89       	ldd	r24, Y+16	; 0x10
    24c4:	8f 87       	std	Y+15, r24	; 0x0f
    24c6:	89 c0       	rjmp	.+274    	; 0x25da <LCD_voidSendNumber+0x1ba>
	{
		temp=ArrNumb[j]+48;
    24c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ca:	99 27       	eor	r25, r25
    24cc:	87 fd       	sbrc	r24, 7
    24ce:	90 95       	com	r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	fc 01       	movw	r30, r24
    24da:	e0 57       	subi	r30, 0x70	; 112
    24dc:	fe 4f       	sbci	r31, 0xFE	; 254
    24de:	80 81       	ld	r24, Z
    24e0:	91 81       	ldd	r25, Z+1	; 0x01
    24e2:	a2 81       	ldd	r26, Z+2	; 0x02
    24e4:	b3 81       	ldd	r27, Z+3	; 0x03
    24e6:	80 5d       	subi	r24, 0xD0	; 208
    24e8:	89 8b       	std	Y+17, r24	; 0x11
		LCD_voidSendChar(temp);
    24ea:	89 89       	ldd	r24, Y+17	; 0x11
    24ec:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a8 ec       	ldi	r26, 0xC8	; 200
    24f6:	b2 e4       	ldi	r27, 0x42	; 66
    24f8:	8b 87       	std	Y+11, r24	; 0x0b
    24fa:	9c 87       	std	Y+12, r25	; 0x0c
    24fc:	ad 87       	std	Y+13, r26	; 0x0d
    24fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	6b 85       	ldd	r22, Y+11	; 0x0b
    2502:	7c 85       	ldd	r23, Y+12	; 0x0c
    2504:	8d 85       	ldd	r24, Y+13	; 0x0d
    2506:	9e 85       	ldd	r25, Y+14	; 0x0e
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	4a e7       	ldi	r20, 0x7A	; 122
    250e:	55 e4       	ldi	r21, 0x45	; 69
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	8f 83       	std	Y+7, r24	; 0x07
    251a:	98 87       	std	Y+8, r25	; 0x08
    251c:	a9 87       	std	Y+9, r26	; 0x09
    251e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2520:	6f 81       	ldd	r22, Y+7	; 0x07
    2522:	78 85       	ldd	r23, Y+8	; 0x08
    2524:	89 85       	ldd	r24, Y+9	; 0x09
    2526:	9a 85       	ldd	r25, Y+10	; 0x0a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	40 e8       	ldi	r20, 0x80	; 128
    252e:	5f e3       	ldi	r21, 0x3F	; 63
    2530:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2534:	88 23       	and	r24, r24
    2536:	2c f4       	brge	.+10     	; 0x2542 <LCD_voidSendNumber+0x122>
		__ticks = 1;
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	3f c0       	rjmp	.+126    	; 0x25c0 <LCD_voidSendNumber+0x1a0>
	else if (__tmp > 65535)
    2542:	6f 81       	ldd	r22, Y+7	; 0x07
    2544:	78 85       	ldd	r23, Y+8	; 0x08
    2546:	89 85       	ldd	r24, Y+9	; 0x09
    2548:	9a 85       	ldd	r25, Y+10	; 0x0a
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	3f ef       	ldi	r19, 0xFF	; 255
    254e:	4f e7       	ldi	r20, 0x7F	; 127
    2550:	57 e4       	ldi	r21, 0x47	; 71
    2552:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2556:	18 16       	cp	r1, r24
    2558:	4c f5       	brge	.+82     	; 0x25ac <LCD_voidSendNumber+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255a:	6b 85       	ldd	r22, Y+11	; 0x0b
    255c:	7c 85       	ldd	r23, Y+12	; 0x0c
    255e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2560:	9e 85       	ldd	r25, Y+14	; 0x0e
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e2       	ldi	r20, 0x20	; 32
    2568:	51 e4       	ldi	r21, 0x41	; 65
    256a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	bc 01       	movw	r22, r24
    2574:	cd 01       	movw	r24, r26
    2576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	0f c0       	rjmp	.+30     	; 0x25a2 <LCD_voidSendNumber+0x182>
    2584:	80 e9       	ldi	r24, 0x90	; 144
    2586:	91 e0       	ldi	r25, 0x01	; 1
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	9c 81       	ldd	r25, Y+4	; 0x04
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_voidSendNumber+0x170>
    2594:	9c 83       	std	Y+4, r25	; 0x04
    2596:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	9e 81       	ldd	r25, Y+6	; 0x06
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	9e 81       	ldd	r25, Y+6	; 0x06
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	69 f7       	brne	.-38     	; 0x2584 <LCD_voidSendNumber+0x164>
    25aa:	14 c0       	rjmp	.+40     	; 0x25d4 <LCD_voidSendNumber+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ac:	6f 81       	ldd	r22, Y+7	; 0x07
    25ae:	78 85       	ldd	r23, Y+8	; 0x08
    25b0:	89 85       	ldd	r24, Y+9	; 0x09
    25b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	f1 f7       	brne	.-4      	; 0x25cc <LCD_voidSendNumber+0x1ac>
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
		ArrNumb[count]=Number%10;
		Number=Number/10;
		count++;
	}
	count--;
	for(s8 j=count; j>=0 ;j--)
    25d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d6:	81 50       	subi	r24, 0x01	; 1
    25d8:	8f 87       	std	Y+15, r24	; 0x0f
    25da:	8f 85       	ldd	r24, Y+15	; 0x0f
    25dc:	88 23       	and	r24, r24
    25de:	0c f0       	brlt	.+2      	; 0x25e2 <LCD_voidSendNumber+0x1c2>
    25e0:	73 cf       	rjmp	.-282    	; 0x24c8 <LCD_voidSendNumber+0xa8>
		_delay_ms(100);


	}

}
    25e2:	65 96       	adiw	r28, 0x15	; 21
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <LCD_voidGoToXY>:

void LCD_voidGoToXY   		(u8 Copy_u8LineNb, u8 Copy_u8Pos)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <LCD_voidGoToXY+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <LCD_voidGoToXY+0x8>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	6a 83       	std	Y+2, r22	; 0x02
	
	switch(Copy_u8LineNb)
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	3c 83       	std	Y+4, r19	; 0x04
    2610:	2b 83       	std	Y+3, r18	; 0x03
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	91 05       	cpc	r25, r1
    261a:	31 f0       	breq	.+12     	; 0x2628 <LCD_voidGoToXY+0x30>
    261c:	2b 81       	ldd	r18, Y+3	; 0x03
    261e:	3c 81       	ldd	r19, Y+4	; 0x04
    2620:	22 30       	cpi	r18, 0x02	; 2
    2622:	31 05       	cpc	r19, r1
    2624:	31 f0       	breq	.+12     	; 0x2632 <LCD_voidGoToXY+0x3a>
    2626:	09 c0       	rjmp	.+18     	; 0x263a <LCD_voidGoToXY+0x42>
	{
		case LCD_u8_LINE_ONE: LCD_voidSendCmnd(0x80+Copy_u8Pos);break;
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	80 58       	subi	r24, 0x80	; 128
    262c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
    2630:	04 c0       	rjmp	.+8      	; 0x263a <LCD_voidGoToXY+0x42>
		case LCD_u8_LINE_TWO: LCD_voidSendCmnd(0xC0+Copy_u8Pos);break;
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	80 54       	subi	r24, 0x40	; 64
    2636:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>

	}
}
    263a:	0f 90       	pop	r0
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <Private_voidWriteHalfPort>:

static void Private_voidWriteHalfPort(u8 Copy_u8Value) //0b11110000
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	00 d0       	rcall	.+0      	; 0x264e <Private_voidWriteHalfPort+0x6>
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_BitValue;
	Local_u8_BitValue = GET_BIT(Copy_u8Value,0);
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	81 70       	andi	r24, 0x01	; 1
    2658:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_BitValue==0?DIO_u8SetPinVale(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_LOW):DIO_u8SetPinVale(LCD_u8_D4_PORT,LCD_u8_D4_PIN,DIO_u8_HIGH);
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	88 23       	and	r24, r24
    265e:	31 f4       	brne	.+12     	; 0x266c <Private_voidWriteHalfPort+0x24>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	63 e0       	ldi	r22, 0x03	; 3
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    266a:	05 c0       	rjmp	.+10     	; 0x2676 <Private_voidWriteHalfPort+0x2e>
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>

	Local_u8_BitValue = GET_BIT(Copy_u8Value,1);
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	86 95       	lsr	r24
    267a:	81 70       	andi	r24, 0x01	; 1
    267c:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_BitValue==0?DIO_u8SetPinVale(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_LOW):DIO_u8SetPinVale(LCD_u8_D5_PORT,LCD_u8_D5_PIN,DIO_u8_HIGH);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	88 23       	and	r24, r24
    2682:	31 f4       	brne	.+12     	; 0x2690 <Private_voidWriteHalfPort+0x48>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	64 e0       	ldi	r22, 0x04	; 4
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    268e:	05 c0       	rjmp	.+10     	; 0x269a <Private_voidWriteHalfPort+0x52>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	64 e0       	ldi	r22, 0x04	; 4
    2694:	41 e0       	ldi	r20, 0x01	; 1
    2696:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	
	Local_u8_BitValue = GET_BIT(Copy_u8Value,2);
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	86 95       	lsr	r24
    269e:	86 95       	lsr	r24
    26a0:	81 70       	andi	r24, 0x01	; 1
    26a2:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_BitValue==0?DIO_u8SetPinVale(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_LOW):DIO_u8SetPinVale(LCD_u8_D6_PORT,LCD_u8_D6_PIN,DIO_u8_HIGH);
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	88 23       	and	r24, r24
    26a8:	31 f4       	brne	.+12     	; 0x26b6 <Private_voidWriteHalfPort+0x6e>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	65 e0       	ldi	r22, 0x05	; 5
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <Private_voidWriteHalfPort+0x78>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	65 e0       	ldi	r22, 0x05	; 5
    26ba:	41 e0       	ldi	r20, 0x01	; 1
    26bc:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
	
	Local_u8_BitValue = GET_BIT(Copy_u8Value,3);
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	86 95       	lsr	r24
    26c4:	86 95       	lsr	r24
    26c6:	86 95       	lsr	r24
    26c8:	81 70       	andi	r24, 0x01	; 1
    26ca:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_BitValue==0?DIO_u8SetPinVale(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_LOW):DIO_u8SetPinVale(LCD_u8_D7_PORT,LCD_u8_D7_PIN,DIO_u8_HIGH);
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	88 23       	and	r24, r24
    26d0:	31 f4       	brne	.+12     	; 0x26de <Private_voidWriteHalfPort+0x96>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	66 e0       	ldi	r22, 0x06	; 6
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <Private_voidWriteHalfPort+0xa0>
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	66 e0       	ldi	r22, 0x06	; 6
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 c2 08 	call	0x1184	; 0x1184 <DIO_u8SetPinVale>
}
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar    (u8 *pattern, u8 PatterPos, u8 Line_Nb ,u8 Pos)
{
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <LCD_voidWriteSpecialChar+0x6>
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <LCD_voidWriteSpecialChar+0x8>
    26fa:	00 d0       	rcall	.+0      	; 0x26fc <LCD_voidWriteSpecialChar+0xa>
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
    2700:	9b 83       	std	Y+3, r25	; 0x03
    2702:	8a 83       	std	Y+2, r24	; 0x02
    2704:	6c 83       	std	Y+4, r22	; 0x04
    2706:	4d 83       	std	Y+5, r20	; 0x05
    2708:	2e 83       	std	Y+6, r18	; 0x06
	LCD_voidSendCmnd(0x40 + (PatterPos*8));   //0b01000000 + 1*8 // to set CGRAM
    270a:	8c 81       	ldd	r24, Y+4	; 0x04
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	08 96       	adiw	r24, 0x08	; 8
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	88 0f       	add	r24, r24
    2718:	99 1f       	adc	r25, r25
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
	for(u8 i=0; i<8 ; i++)
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <LCD_voidWriteSpecialChar+0x50>
	{
		LCD_voidSendChar(pattern[i]);
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	e2 0f       	add	r30, r18
    2734:	f3 1f       	adc	r31, r19
    2736:	80 81       	ld	r24, Z
    2738:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
}

void LCD_voidWriteSpecialChar    (u8 *pattern, u8 PatterPos, u8 Line_Nb ,u8 Pos)
{
	LCD_voidSendCmnd(0x40 + (PatterPos*8));   //0b01000000 + 1*8 // to set CGRAM
	for(u8 i=0; i<8 ; i++)
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	8f 5f       	subi	r24, 0xFF	; 255
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	88 30       	cpi	r24, 0x08	; 8
    2746:	78 f3       	brcs	.-34     	; 0x2726 <LCD_voidWriteSpecialChar+0x34>
	{
		LCD_voidSendChar(pattern[i]);
	}
	LCD_voidGoToXY(Line_Nb,Pos);
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	6e 81       	ldd	r22, Y+6	; 0x06
    274c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_voidGoToXY>
	LCD_voidSendChar(PatterPos);
    2750:	8c 81       	ldd	r24, Y+4	; 0x04
    2752:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
	
	
}
    2756:	26 96       	adiw	r28, 0x06	; 6
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <LCD_voidSendNumber2>:
	
void LCD_voidSendNumber2(f64 Number)
{
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	60 97       	sbiw	r28, 0x10	; 16
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	6d 87       	std	Y+13, r22	; 0x0d
    2786:	7e 87       	std	Y+14, r23	; 0x0e
    2788:	8f 87       	std	Y+15, r24	; 0x0f
    278a:	98 8b       	std	Y+16, r25	; 0x10

	if(Number<0)
    278c:	6d 85       	ldd	r22, Y+13	; 0x0d
    278e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2790:	8f 85       	ldd	r24, Y+15	; 0x0f
    2792:	98 89       	ldd	r25, Y+16	; 0x10
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e0       	ldi	r20, 0x00	; 0
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	64 f4       	brge	.+24     	; 0x27bc <LCD_voidSendNumber2+0x54>
	{
		Number*=-1;
    27a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a8:	af 85       	ldd	r26, Y+15	; 0x0f
    27aa:	b8 89       	ldd	r27, Y+16	; 0x10
    27ac:	b0 58       	subi	r27, 0x80	; 128
    27ae:	8d 87       	std	Y+13, r24	; 0x0d
    27b0:	9e 87       	std	Y+14, r25	; 0x0e
    27b2:	af 87       	std	Y+15, r26	; 0x0f
    27b4:	b8 8b       	std	Y+16, r27	; 0x10
		LCD_voidSendChar('-');
    27b6:	8d e2       	ldi	r24, 0x2D	; 45
    27b8:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
	}

	u32 NoFloat=(u32)Number;
    27bc:	6d 85       	ldd	r22, Y+13	; 0x0d
    27be:	7e 85       	ldd	r23, Y+14	; 0x0e
    27c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c2:	98 89       	ldd	r25, Y+16	; 0x10
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	89 87       	std	Y+9, r24	; 0x09
    27ce:	9a 87       	std	Y+10, r25	; 0x0a
    27d0:	ab 87       	std	Y+11, r26	; 0x0b
    27d2:	bc 87       	std	Y+12, r27	; 0x0c
	if(Number==0)
    27d4:	6d 85       	ldd	r22, Y+13	; 0x0d
    27d6:	7e 85       	ldd	r23, Y+14	; 0x0e
    27d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27da:	98 89       	ldd	r25, Y+16	; 0x10
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	50 e0       	ldi	r21, 0x00	; 0
    27e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <LCD_voidSendNumber2+0x8c>
	{
		LCD_voidSendChar('0');
    27ec:	80 e3       	ldi	r24, 0x30	; 48
    27ee:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
    27f2:	ec c0       	rjmp	.+472    	; 0x29cc <LCD_voidSendNumber2+0x264>

	}
	else
	{
		if(NoFloat==0)
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    27fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 05       	cpc	r26, r1
    2800:	b1 05       	cpc	r27, r1
    2802:	19 f4       	brne	.+6      	; 0x280a <LCD_voidSendNumber2+0xa2>
		{
			LCD_voidSendChar('0');
    2804:	80 e3       	ldi	r24, 0x30	; 48
    2806:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
		}

		u32 Rev=1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a0 e0       	ldi	r26, 0x00	; 0
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	9e 83       	std	Y+6, r25	; 0x06
    2816:	af 83       	std	Y+7, r26	; 0x07
    2818:	b8 87       	std	Y+8, r27	; 0x08
    281a:	36 c0       	rjmp	.+108    	; 0x2888 <LCD_voidSendNumber2+0x120>
		while(NoFloat)
		{
			Rev=(Rev*10)+(NoFloat%10);
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	af 81       	ldd	r26, Y+7	; 0x07
    2822:	b8 85       	ldd	r27, Y+8	; 0x08
    2824:	2a e0       	ldi	r18, 0x0A	; 10
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	bc 01       	movw	r22, r24
    282e:	cd 01       	movw	r24, r26
    2830:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <__mulsi3>
    2834:	7b 01       	movw	r14, r22
    2836:	8c 01       	movw	r16, r24
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	ab 85       	ldd	r26, Y+11	; 0x0b
    283e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2840:	2a e0       	ldi	r18, 0x0A	; 10
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8e 0d       	add	r24, r14
    2856:	9f 1d       	adc	r25, r15
    2858:	a0 1f       	adc	r26, r16
    285a:	b1 1f       	adc	r27, r17
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	af 83       	std	Y+7, r26	; 0x07
    2862:	b8 87       	std	Y+8, r27	; 0x08
			NoFloat/=10;
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	ab 85       	ldd	r26, Y+11	; 0x0b
    286a:	bc 85       	ldd	r27, Y+12	; 0x0c
    286c:	2a e0       	ldi	r18, 0x0A	; 10
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	50 e0       	ldi	r21, 0x00	; 0
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    287c:	da 01       	movw	r26, r20
    287e:	c9 01       	movw	r24, r18
    2880:	89 87       	std	Y+9, r24	; 0x09
    2882:	9a 87       	std	Y+10, r25	; 0x0a
    2884:	ab 87       	std	Y+11, r26	; 0x0b
    2886:	bc 87       	std	Y+12, r27	; 0x0c
		{
			LCD_voidSendChar('0');
		}

		u32 Rev=1;
		while(NoFloat)
    2888:	89 85       	ldd	r24, Y+9	; 0x09
    288a:	9a 85       	ldd	r25, Y+10	; 0x0a
    288c:	ab 85       	ldd	r26, Y+11	; 0x0b
    288e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	a1 05       	cpc	r26, r1
    2894:	b1 05       	cpc	r27, r1
    2896:	11 f6       	brne	.-124    	; 0x281c <LCD_voidSendNumber2+0xb4>
		{
			Rev=(Rev*10)+(NoFloat%10);
			NoFloat/=10;
		}
		NoFloat=Rev;
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	af 81       	ldd	r26, Y+7	; 0x07
    289e:	b8 85       	ldd	r27, Y+8	; 0x08
    28a0:	89 87       	std	Y+9, r24	; 0x09
    28a2:	9a 87       	std	Y+10, r25	; 0x0a
    28a4:	ab 87       	std	Y+11, r26	; 0x0b
    28a6:	bc 87       	std	Y+12, r27	; 0x0c
    28a8:	23 c0       	rjmp	.+70     	; 0x28f0 <LCD_voidSendNumber2+0x188>
		while(NoFloat !=1)
		{
			LCD_voidSendChar((NoFloat%10)+'0');
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    28b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    28b2:	2a e0       	ldi	r18, 0x0A	; 10
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	bc 01       	movw	r22, r24
    28bc:	cd 01       	movw	r24, r26
    28be:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	80 5d       	subi	r24, 0xD0	; 208
    28c8:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
			NoFloat/=10;
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	ab 85       	ldd	r26, Y+11	; 0x0b
    28d2:	bc 85       	ldd	r27, Y+12	; 0x0c
    28d4:	2a e0       	ldi	r18, 0x0A	; 10
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e0       	ldi	r20, 0x00	; 0
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	bc 01       	movw	r22, r24
    28de:	cd 01       	movw	r24, r26
    28e0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    28e4:	da 01       	movw	r26, r20
    28e6:	c9 01       	movw	r24, r18
    28e8:	89 87       	std	Y+9, r24	; 0x09
    28ea:	9a 87       	std	Y+10, r25	; 0x0a
    28ec:	ab 87       	std	Y+11, r26	; 0x0b
    28ee:	bc 87       	std	Y+12, r27	; 0x0c
		{
			Rev=(Rev*10)+(NoFloat%10);
			NoFloat/=10;
		}
		NoFloat=Rev;
		while(NoFloat !=1)
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	ab 85       	ldd	r26, Y+11	; 0x0b
    28f6:	bc 85       	ldd	r27, Y+12	; 0x0c
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	91 05       	cpc	r25, r1
    28fc:	a1 05       	cpc	r26, r1
    28fe:	b1 05       	cpc	r27, r1
    2900:	a1 f6       	brne	.-88     	; 0x28aa <LCD_voidSendNumber2+0x142>
		{
			LCD_voidSendChar((NoFloat%10)+'0');
			NoFloat/=10;
		}
		f64 Copy_f64Float=(Number-(u32)Number);
    2902:	6d 85       	ldd	r22, Y+13	; 0x0d
    2904:	7e 85       	ldd	r23, Y+14	; 0x0e
    2906:	8f 85       	ldd	r24, Y+15	; 0x0f
    2908:	98 89       	ldd	r25, Y+16	; 0x10
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2920:	7e 85       	ldd	r23, Y+14	; 0x0e
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	98 89       	ldd	r25, Y+16	; 0x10
    2926:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	9a 83       	std	Y+2, r25	; 0x02
    2932:	ab 83       	std	Y+3, r26	; 0x03
    2934:	bc 83       	std	Y+4, r27	; 0x04
		if(Copy_f64Float>0)
    2936:	69 81       	ldd	r22, Y+1	; 0x01
    2938:	7a 81       	ldd	r23, Y+2	; 0x02
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	20 e0       	ldi	r18, 0x00	; 0
    2940:	30 e0       	ldi	r19, 0x00	; 0
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    294a:	18 16       	cp	r1, r24
    294c:	0c f0       	brlt	.+2      	; 0x2950 <LCD_voidSendNumber2+0x1e8>
    294e:	3e c0       	rjmp	.+124    	; 0x29cc <LCD_voidSendNumber2+0x264>
		{
			LCD_voidSendChar('.');
    2950:	8e e2       	ldi	r24, 0x2E	; 46
    2952:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
			Copy_f64Float*=10.0;
    2956:	69 81       	ldd	r22, Y+1	; 0x01
    2958:	7a 81       	ldd	r23, Y+2	; 0x02
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	ab 83       	std	Y+3, r26	; 0x03
    2974:	bc 83       	std	Y+4, r27	; 0x04
			LCD_voidSendChar((u8)Copy_f64Float+'0');
    2976:	69 81       	ldd	r22, Y+1	; 0x01
    2978:	7a 81       	ldd	r23, Y+2	; 0x02
    297a:	8b 81       	ldd	r24, Y+3	; 0x03
    297c:	9c 81       	ldd	r25, Y+4	; 0x04
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	80 5d       	subi	r24, 0xD0	; 208
    2988:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
			Copy_f64Float*=10.0;
    298c:	69 81       	ldd	r22, Y+1	; 0x01
    298e:	7a 81       	ldd	r23, Y+2	; 0x02
    2990:	8b 81       	ldd	r24, Y+3	; 0x03
    2992:	9c 81       	ldd	r25, Y+4	; 0x04
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	89 83       	std	Y+1, r24	; 0x01
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	ab 83       	std	Y+3, r26	; 0x03
    29aa:	bc 83       	std	Y+4, r27	; 0x04
			LCD_voidSendChar(((u8)Copy_f64Float%10)+'0');
    29ac:	69 81       	ldd	r22, Y+1	; 0x01
    29ae:	7a 81       	ldd	r23, Y+2	; 0x02
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	9a e0       	ldi	r25, 0x0A	; 10
    29be:	69 2f       	mov	r22, r25
    29c0:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <__udivmodqi4>
    29c4:	89 2f       	mov	r24, r25
    29c6:	80 5d       	subi	r24, 0xD0	; 208
    29c8:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>

		}
	}

}
    29cc:	60 96       	adiw	r28, 0x10	; 16
    29ce:	0f b6       	in	r0, 0x3f	; 63
    29d0:	f8 94       	cli
    29d2:	de bf       	out	0x3e, r29	; 62
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	cd bf       	out	0x3d, r28	; 61
    29d8:	cf 91       	pop	r28
    29da:	df 91       	pop	r29
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	ff 90       	pop	r15
    29e2:	ef 90       	pop	r14
    29e4:	08 95       	ret

000029e6 <main>:
#include"DIO_interface.h"
#include"KPD_interface.h"
#include"LCD_Interface.h"

int main(void)
{
    29e6:	ef 92       	push	r14
    29e8:	ff 92       	push	r15
    29ea:	0f 93       	push	r16
    29ec:	1f 93       	push	r17
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	6e 97       	sbiw	r28, 0x1e	; 30
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	f32 Loccal_Numb1=0;
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	88 8f       	std	Y+24, r24	; 0x18
    2a0c:	99 8f       	std	Y+25, r25	; 0x19
    2a0e:	aa 8f       	std	Y+26, r26	; 0x1a
    2a10:	bb 8f       	std	Y+27, r27	; 0x1b
	f32 Loccal_Numb2=0;
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	a0 e0       	ldi	r26, 0x00	; 0
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	8c 8b       	std	Y+20, r24	; 0x14
    2a1c:	9d 8b       	std	Y+21, r25	; 0x15
    2a1e:	ae 8b       	std	Y+22, r26	; 0x16
    2a20:	bf 8b       	std	Y+23, r27	; 0x17
	u8 Loccal_Operation;
	f32 Local_Equal;
	DIO_voidInit();
    2a22:	0e 94 a5 07 	call	0xf4a	; 0xf4a <DIO_voidInit>
	LCD_voidInit();
    2a26:	0e 94 15 0c 	call	0x182a	; 0x182a <LCD_voidInit>
    2a2a:	3f c0       	rjmp	.+126    	; 0x2aaa <main+0xc4>
while(1)
{

		while(Local_u8Key!= '+' && Local_u8Key!= '-' && Local_u8Key!= '*' && Local_u8Key!= '/'  && Local_u8Key!= '%'   )
	 {
		 KPD_u8GetState(&Local_u8Key);
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	4c 96       	adiw	r24, 0x1c	; 28
    2a30:	0e 94 85 0b 	call	0x170a	; 0x170a <KPD_u8GetState>
		 if (Local_u8Key!=KPD_u8_NOT_PRESSED)
    2a34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a36:	8f 3f       	cpi	r24, 0xFF	; 255
    2a38:	c1 f1       	breq	.+112    	; 0x2aaa <main+0xc4>
		 	 {
				if(Local_u8Key>='0' && Local_u8Key <='9')
    2a3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a3c:	80 33       	cpi	r24, 0x30	; 48
    2a3e:	a8 f1       	brcs	.+106    	; 0x2aaa <main+0xc4>
    2a40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a42:	8a 33       	cpi	r24, 0x3A	; 58
    2a44:	90 f5       	brcc	.+100    	; 0x2aaa <main+0xc4>
				{
				 LCD_voidSendChar(Local_u8Key);
    2a46:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a48:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
				 Loccal_Numb1=(Loccal_Numb1*10)+Local_u8Key-'0';
    2a4c:	68 8d       	ldd	r22, Y+24	; 0x18
    2a4e:	79 8d       	ldd	r23, Y+25	; 0x19
    2a50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	7c 01       	movw	r14, r24
    2a66:	8d 01       	movw	r16, r26
    2a68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a6a:	88 2f       	mov	r24, r24
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	aa 27       	eor	r26, r26
    2a70:	97 fd       	sbrc	r25, 7
    2a72:	a0 95       	com	r26
    2a74:	ba 2f       	mov	r27, r26
    2a76:	bc 01       	movw	r22, r24
    2a78:	cd 01       	movw	r24, r26
    2a7a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	ac 01       	movw	r20, r24
    2a82:	c8 01       	movw	r24, r16
    2a84:	b7 01       	movw	r22, r14
    2a86:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e4       	ldi	r20, 0x40	; 64
    2a98:	52 e4       	ldi	r21, 0x42	; 66
    2a9a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	88 8f       	std	Y+24, r24	; 0x18
    2aa4:	99 8f       	std	Y+25, r25	; 0x19
    2aa6:	aa 8f       	std	Y+26, r26	; 0x1a
    2aa8:	bb 8f       	std	Y+27, r27	; 0x1b


while(1)
{

		while(Local_u8Key!= '+' && Local_u8Key!= '-' && Local_u8Key!= '*' && Local_u8Key!= '/'  && Local_u8Key!= '%'   )
    2aaa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aac:	8b 32       	cpi	r24, 0x2B	; 43
    2aae:	69 f0       	breq	.+26     	; 0x2aca <main+0xe4>
    2ab0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ab2:	8d 32       	cpi	r24, 0x2D	; 45
    2ab4:	51 f0       	breq	.+20     	; 0x2aca <main+0xe4>
    2ab6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ab8:	8a 32       	cpi	r24, 0x2A	; 42
    2aba:	39 f0       	breq	.+14     	; 0x2aca <main+0xe4>
    2abc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2abe:	8f 32       	cpi	r24, 0x2F	; 47
    2ac0:	21 f0       	breq	.+8      	; 0x2aca <main+0xe4>
    2ac2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ac4:	85 32       	cpi	r24, 0x25	; 37
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <main+0xe4>
    2ac8:	b1 cf       	rjmp	.-158    	; 0x2a2c <main+0x46>
				 LCD_voidSendChar(Local_u8Key);
				 Loccal_Numb1=(Loccal_Numb1*10)+Local_u8Key-'0';
				}
		 	  }
	 }
		    Loccal_Operation=Local_u8Key;
    2aca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
			LCD_voidSendChar(Local_u8Key);
    2ace:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ad0:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
    2ad4:	3f c0       	rjmp	.+126    	; 0x2b54 <main+0x16e>


			while(Local_u8Key!= '=' )
		 {
			 KPD_u8GetState(&Local_u8Key);
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	4c 96       	adiw	r24, 0x1c	; 28
    2ada:	0e 94 85 0b 	call	0x170a	; 0x170a <KPD_u8GetState>
			 if (Local_u8Key!=KPD_u8_NOT_PRESSED)
    2ade:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ae0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ae2:	c1 f1       	breq	.+112    	; 0x2b54 <main+0x16e>
			 	 {
					if(Local_u8Key>='0' && Local_u8Key <='9')
    2ae4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ae6:	80 33       	cpi	r24, 0x30	; 48
    2ae8:	a8 f1       	brcs	.+106    	; 0x2b54 <main+0x16e>
    2aea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aec:	8a 33       	cpi	r24, 0x3A	; 58
    2aee:	90 f5       	brcc	.+100    	; 0x2b54 <main+0x16e>
					{
					 LCD_voidSendChar(Local_u8Key);
    2af0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2af2:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>
					 Loccal_Numb2=(Loccal_Numb2*10)+Local_u8Key-'0';
    2af6:	6c 89       	ldd	r22, Y+20	; 0x14
    2af8:	7d 89       	ldd	r23, Y+21	; 0x15
    2afa:	8e 89       	ldd	r24, Y+22	; 0x16
    2afc:	9f 89       	ldd	r25, Y+23	; 0x17
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	7c 01       	movw	r14, r24
    2b10:	8d 01       	movw	r16, r26
    2b12:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b14:	88 2f       	mov	r24, r24
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	aa 27       	eor	r26, r26
    2b1a:	97 fd       	sbrc	r25, 7
    2b1c:	a0 95       	com	r26
    2b1e:	ba 2f       	mov	r27, r26
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	c8 01       	movw	r24, r16
    2b2e:	b7 01       	movw	r22, r14
    2b30:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e4       	ldi	r20, 0x40	; 64
    2b42:	52 e4       	ldi	r21, 0x42	; 66
    2b44:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2b48:	dc 01       	movw	r26, r24
    2b4a:	cb 01       	movw	r24, r22
    2b4c:	8c 8b       	std	Y+20, r24	; 0x14
    2b4e:	9d 8b       	std	Y+21, r25	; 0x15
    2b50:	ae 8b       	std	Y+22, r26	; 0x16
    2b52:	bf 8b       	std	Y+23, r27	; 0x17
	 }
		    Loccal_Operation=Local_u8Key;
			LCD_voidSendChar(Local_u8Key);


			while(Local_u8Key!= '=' )
    2b54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b56:	8d 33       	cpi	r24, 0x3D	; 61
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <main+0x176>
    2b5a:	bd cf       	rjmp	.-134    	; 0x2ad6 <main+0xf0>
					 LCD_voidSendChar(Local_u8Key);
					 Loccal_Numb2=(Loccal_Numb2*10)+Local_u8Key-'0';
					}
			 	  }
		 }
				LCD_voidSendChar(Local_u8Key);
    2b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b5e:	0e 94 c0 10 	call	0x2180	; 0x2180 <LCD_voidSendChar>

			switch(Loccal_Operation)
    2b62:	8b 89       	ldd	r24, Y+19	; 0x13
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	3e 8f       	std	Y+30, r19	; 0x1e
    2b6a:	2d 8f       	std	Y+29, r18	; 0x1d
    2b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b70:	8b 32       	cpi	r24, 0x2B	; 43
    2b72:	91 05       	cpc	r25, r1
    2b74:	f1 f0       	breq	.+60     	; 0x2bb2 <main+0x1cc>
    2b76:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2b78:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2b7a:	2c 32       	cpi	r18, 0x2C	; 44
    2b7c:	31 05       	cpc	r19, r1
    2b7e:	6c f4       	brge	.+26     	; 0x2b9a <main+0x1b4>
    2b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b84:	85 32       	cpi	r24, 0x25	; 37
    2b86:	91 05       	cpc	r25, r1
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <main+0x1a6>
    2b8a:	77 c0       	rjmp	.+238    	; 0x2c7a <main+0x294>
    2b8c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2b8e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2b90:	2a 32       	cpi	r18, 0x2A	; 42
    2b92:	31 05       	cpc	r19, r1
    2b94:	09 f4       	brne	.+2      	; 0x2b98 <main+0x1b2>
    2b96:	3f c0       	rjmp	.+126    	; 0x2c16 <main+0x230>
    2b98:	98 c0       	rjmp	.+304    	; 0x2cca <main+0x2e4>
    2b9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b9e:	8d 32       	cpi	r24, 0x2D	; 45
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	01 f1       	breq	.+64     	; 0x2be4 <main+0x1fe>
    2ba4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2ba6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2ba8:	2f 32       	cpi	r18, 0x2F	; 47
    2baa:	31 05       	cpc	r19, r1
    2bac:	09 f4       	brne	.+2      	; 0x2bb0 <main+0x1ca>
    2bae:	4c c0       	rjmp	.+152    	; 0x2c48 <main+0x262>
    2bb0:	8c c0       	rjmp	.+280    	; 0x2cca <main+0x2e4>
			{
			        case '+': Local_Equal=Loccal_Numb1+Loccal_Numb2;
    2bb2:	68 8d       	ldd	r22, Y+24	; 0x18
    2bb4:	79 8d       	ldd	r23, Y+25	; 0x19
    2bb6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bb8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bba:	2c 89       	ldd	r18, Y+20	; 0x14
    2bbc:	3d 89       	ldd	r19, Y+21	; 0x15
    2bbe:	4e 89       	ldd	r20, Y+22	; 0x16
    2bc0:	5f 89       	ldd	r21, Y+23	; 0x17
    2bc2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	8f 87       	std	Y+15, r24	; 0x0f
    2bcc:	98 8b       	std	Y+16, r25	; 0x10
    2bce:	a9 8b       	std	Y+17, r26	; 0x11
    2bd0:	ba 8b       	std	Y+18, r27	; 0x12
			        LCD_voidSendNumber2(Local_Equal);
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	98 89       	ldd	r25, Y+16	; 0x10
    2bd6:	a9 89       	ldd	r26, Y+17	; 0x11
    2bd8:	ba 89       	ldd	r27, Y+18	; 0x12
    2bda:	bc 01       	movw	r22, r24
    2bdc:	cd 01       	movw	r24, r26
    2bde:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidSendNumber2>
    2be2:	73 c0       	rjmp	.+230    	; 0x2cca <main+0x2e4>
			    break;

			        case '-': Local_Equal=Loccal_Numb1-Loccal_Numb2;
    2be4:	68 8d       	ldd	r22, Y+24	; 0x18
    2be6:	79 8d       	ldd	r23, Y+25	; 0x19
    2be8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2bea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2bec:	2c 89       	ldd	r18, Y+20	; 0x14
    2bee:	3d 89       	ldd	r19, Y+21	; 0x15
    2bf0:	4e 89       	ldd	r20, Y+22	; 0x16
    2bf2:	5f 89       	ldd	r21, Y+23	; 0x17
    2bf4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	8f 87       	std	Y+15, r24	; 0x0f
    2bfe:	98 8b       	std	Y+16, r25	; 0x10
    2c00:	a9 8b       	std	Y+17, r26	; 0x11
    2c02:	ba 8b       	std	Y+18, r27	; 0x12
			        LCD_voidSendNumber2(Local_Equal);
    2c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c06:	98 89       	ldd	r25, Y+16	; 0x10
    2c08:	a9 89       	ldd	r26, Y+17	; 0x11
    2c0a:	ba 89       	ldd	r27, Y+18	; 0x12
    2c0c:	bc 01       	movw	r22, r24
    2c0e:	cd 01       	movw	r24, r26
    2c10:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidSendNumber2>
    2c14:	5a c0       	rjmp	.+180    	; 0x2cca <main+0x2e4>
			    break;

			        case '*': Local_Equal=Loccal_Numb1*Loccal_Numb2;
    2c16:	68 8d       	ldd	r22, Y+24	; 0x18
    2c18:	79 8d       	ldd	r23, Y+25	; 0x19
    2c1a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c1c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c1e:	2c 89       	ldd	r18, Y+20	; 0x14
    2c20:	3d 89       	ldd	r19, Y+21	; 0x15
    2c22:	4e 89       	ldd	r20, Y+22	; 0x16
    2c24:	5f 89       	ldd	r21, Y+23	; 0x17
    2c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	8f 87       	std	Y+15, r24	; 0x0f
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	a9 8b       	std	Y+17, r26	; 0x11
    2c34:	ba 8b       	std	Y+18, r27	; 0x12
			        LCD_voidSendNumber2(Local_Equal);
    2c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c38:	98 89       	ldd	r25, Y+16	; 0x10
    2c3a:	a9 89       	ldd	r26, Y+17	; 0x11
    2c3c:	ba 89       	ldd	r27, Y+18	; 0x12
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidSendNumber2>
    2c46:	41 c0       	rjmp	.+130    	; 0x2cca <main+0x2e4>
			    break;

			        case '/': Local_Equal=Loccal_Numb1/Loccal_Numb2;
    2c48:	68 8d       	ldd	r22, Y+24	; 0x18
    2c4a:	79 8d       	ldd	r23, Y+25	; 0x19
    2c4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c4e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c50:	2c 89       	ldd	r18, Y+20	; 0x14
    2c52:	3d 89       	ldd	r19, Y+21	; 0x15
    2c54:	4e 89       	ldd	r20, Y+22	; 0x16
    2c56:	5f 89       	ldd	r21, Y+23	; 0x17
    2c58:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	8f 87       	std	Y+15, r24	; 0x0f
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	a9 8b       	std	Y+17, r26	; 0x11
    2c66:	ba 8b       	std	Y+18, r27	; 0x12
			        LCD_voidSendNumber2(Local_Equal);
    2c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6a:	98 89       	ldd	r25, Y+16	; 0x10
    2c6c:	a9 89       	ldd	r26, Y+17	; 0x11
    2c6e:	ba 89       	ldd	r27, Y+18	; 0x12
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidSendNumber2>
    2c78:	28 c0       	rjmp	.+80     	; 0x2cca <main+0x2e4>
			    break;

			        case '%': Local_Equal=(u32)Loccal_Numb1%(u32)Loccal_Numb2;
    2c7a:	68 8d       	ldd	r22, Y+24	; 0x18
    2c7c:	79 8d       	ldd	r23, Y+25	; 0x19
    2c7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2c80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c86:	7b 01       	movw	r14, r22
    2c88:	8c 01       	movw	r16, r24
    2c8a:	6c 89       	ldd	r22, Y+20	; 0x14
    2c8c:	7d 89       	ldd	r23, Y+21	; 0x15
    2c8e:	8e 89       	ldd	r24, Y+22	; 0x16
    2c90:	9f 89       	ldd	r25, Y+23	; 0x17
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	b7 01       	movw	r22, r14
    2c9e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__udivmodsi4>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	bc 01       	movw	r22, r24
    2ca8:	cd 01       	movw	r24, r26
    2caa:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8f 87       	std	Y+15, r24	; 0x0f
    2cb4:	98 8b       	std	Y+16, r25	; 0x10
    2cb6:	a9 8b       	std	Y+17, r26	; 0x11
    2cb8:	ba 8b       	std	Y+18, r27	; 0x12
			        LCD_voidSendNumber2(Local_Equal);
    2cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cbc:	98 89       	ldd	r25, Y+16	; 0x10
    2cbe:	a9 89       	ldd	r26, Y+17	; 0x11
    2cc0:	ba 89       	ldd	r27, Y+18	; 0x12
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	0e 94 b4 13 	call	0x2768	; 0x2768 <LCD_voidSendNumber2>
			    break;


			}
			Loccal_Numb1=0;
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a0 e0       	ldi	r26, 0x00	; 0
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	88 8f       	std	Y+24, r24	; 0x18
    2cd4:	99 8f       	std	Y+25, r25	; 0x19
    2cd6:	aa 8f       	std	Y+26, r26	; 0x1a
    2cd8:	bb 8f       	std	Y+27, r27	; 0x1b
			Loccal_Numb2=0;
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	a0 e0       	ldi	r26, 0x00	; 0
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	8c 8b       	std	Y+20, r24	; 0x14
    2ce4:	9d 8b       	std	Y+21, r25	; 0x15
    2ce6:	ae 8b       	std	Y+22, r26	; 0x16
    2ce8:	bf 8b       	std	Y+23, r27	; 0x17
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	aa e7       	ldi	r26, 0x7A	; 122
    2cf0:	b4 e4       	ldi	r27, 0x44	; 68
    2cf2:	8b 87       	std	Y+11, r24	; 0x0b
    2cf4:	9c 87       	std	Y+12, r25	; 0x0c
    2cf6:	ad 87       	std	Y+13, r26	; 0x0d
    2cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	4a e7       	ldi	r20, 0x7A	; 122
    2d08:	55 e4       	ldi	r21, 0x45	; 69
    2d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	8f 83       	std	Y+7, r24	; 0x07
    2d14:	98 87       	std	Y+8, r25	; 0x08
    2d16:	a9 87       	std	Y+9, r26	; 0x09
    2d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d1c:	78 85       	ldd	r23, Y+8	; 0x08
    2d1e:	89 85       	ldd	r24, Y+9	; 0x09
    2d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	40 e8       	ldi	r20, 0x80	; 128
    2d28:	5f e3       	ldi	r21, 0x3F	; 63
    2d2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d2e:	88 23       	and	r24, r24
    2d30:	2c f4       	brge	.+10     	; 0x2d3c <main+0x356>
		__ticks = 1;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	9e 83       	std	Y+6, r25	; 0x06
    2d38:	8d 83       	std	Y+5, r24	; 0x05
    2d3a:	3f c0       	rjmp	.+126    	; 0x2dba <main+0x3d4>
	else if (__tmp > 65535)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	4c f5       	brge	.+82     	; 0x2da6 <main+0x3c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	40 e2       	ldi	r20, 0x20	; 32
    2d62:	51 e4       	ldi	r21, 0x41	; 65
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	bc 01       	movw	r22, r24
    2d6e:	cd 01       	movw	r24, r26
    2d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	9e 83       	std	Y+6, r25	; 0x06
    2d7a:	8d 83       	std	Y+5, r24	; 0x05
    2d7c:	0f c0       	rjmp	.+30     	; 0x2d9c <main+0x3b6>
    2d7e:	80 e9       	ldi	r24, 0x90	; 144
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	9c 83       	std	Y+4, r25	; 0x04
    2d84:	8b 83       	std	Y+3, r24	; 0x03
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <main+0x3a4>
    2d8e:	9c 83       	std	Y+4, r25	; 0x04
    2d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	9e 81       	ldd	r25, Y+6	; 0x06
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	69 f7       	brne	.-38     	; 0x2d7e <main+0x398>
    2da4:	14 c0       	rjmp	.+40     	; 0x2dce <main+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbe:	9a 83       	std	Y+2, r25	; 0x02
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	01 97       	sbiw	r24, 0x01	; 1
    2dc8:	f1 f7       	brne	.-4      	; 0x2dc6 <main+0x3e0>
    2dca:	9a 83       	std	Y+2, r25	; 0x02
    2dcc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_voidSendCmnd(0x1);
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendCmnd>
    2dd4:	6a ce       	rjmp	.-812    	; 0x2aaa <main+0xc4>

00002dd6 <__mulsi3>:
    2dd6:	62 9f       	mul	r22, r18
    2dd8:	d0 01       	movw	r26, r0
    2dda:	73 9f       	mul	r23, r19
    2ddc:	f0 01       	movw	r30, r0
    2dde:	82 9f       	mul	r24, r18
    2de0:	e0 0d       	add	r30, r0
    2de2:	f1 1d       	adc	r31, r1
    2de4:	64 9f       	mul	r22, r20
    2de6:	e0 0d       	add	r30, r0
    2de8:	f1 1d       	adc	r31, r1
    2dea:	92 9f       	mul	r25, r18
    2dec:	f0 0d       	add	r31, r0
    2dee:	83 9f       	mul	r24, r19
    2df0:	f0 0d       	add	r31, r0
    2df2:	74 9f       	mul	r23, r20
    2df4:	f0 0d       	add	r31, r0
    2df6:	65 9f       	mul	r22, r21
    2df8:	f0 0d       	add	r31, r0
    2dfa:	99 27       	eor	r25, r25
    2dfc:	72 9f       	mul	r23, r18
    2dfe:	b0 0d       	add	r27, r0
    2e00:	e1 1d       	adc	r30, r1
    2e02:	f9 1f       	adc	r31, r25
    2e04:	63 9f       	mul	r22, r19
    2e06:	b0 0d       	add	r27, r0
    2e08:	e1 1d       	adc	r30, r1
    2e0a:	f9 1f       	adc	r31, r25
    2e0c:	bd 01       	movw	r22, r26
    2e0e:	cf 01       	movw	r24, r30
    2e10:	11 24       	eor	r1, r1
    2e12:	08 95       	ret

00002e14 <__udivmodqi4>:
    2e14:	99 1b       	sub	r25, r25
    2e16:	79 e0       	ldi	r23, 0x09	; 9
    2e18:	04 c0       	rjmp	.+8      	; 0x2e22 <__udivmodqi4_ep>

00002e1a <__udivmodqi4_loop>:
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	96 17       	cp	r25, r22
    2e1e:	08 f0       	brcs	.+2      	; 0x2e22 <__udivmodqi4_ep>
    2e20:	96 1b       	sub	r25, r22

00002e22 <__udivmodqi4_ep>:
    2e22:	88 1f       	adc	r24, r24
    2e24:	7a 95       	dec	r23
    2e26:	c9 f7       	brne	.-14     	; 0x2e1a <__udivmodqi4_loop>
    2e28:	80 95       	com	r24
    2e2a:	08 95       	ret

00002e2c <__udivmodsi4>:
    2e2c:	a1 e2       	ldi	r26, 0x21	; 33
    2e2e:	1a 2e       	mov	r1, r26
    2e30:	aa 1b       	sub	r26, r26
    2e32:	bb 1b       	sub	r27, r27
    2e34:	fd 01       	movw	r30, r26
    2e36:	0d c0       	rjmp	.+26     	; 0x2e52 <__udivmodsi4_ep>

00002e38 <__udivmodsi4_loop>:
    2e38:	aa 1f       	adc	r26, r26
    2e3a:	bb 1f       	adc	r27, r27
    2e3c:	ee 1f       	adc	r30, r30
    2e3e:	ff 1f       	adc	r31, r31
    2e40:	a2 17       	cp	r26, r18
    2e42:	b3 07       	cpc	r27, r19
    2e44:	e4 07       	cpc	r30, r20
    2e46:	f5 07       	cpc	r31, r21
    2e48:	20 f0       	brcs	.+8      	; 0x2e52 <__udivmodsi4_ep>
    2e4a:	a2 1b       	sub	r26, r18
    2e4c:	b3 0b       	sbc	r27, r19
    2e4e:	e4 0b       	sbc	r30, r20
    2e50:	f5 0b       	sbc	r31, r21

00002e52 <__udivmodsi4_ep>:
    2e52:	66 1f       	adc	r22, r22
    2e54:	77 1f       	adc	r23, r23
    2e56:	88 1f       	adc	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	1a 94       	dec	r1
    2e5c:	69 f7       	brne	.-38     	; 0x2e38 <__udivmodsi4_loop>
    2e5e:	60 95       	com	r22
    2e60:	70 95       	com	r23
    2e62:	80 95       	com	r24
    2e64:	90 95       	com	r25
    2e66:	9b 01       	movw	r18, r22
    2e68:	ac 01       	movw	r20, r24
    2e6a:	bd 01       	movw	r22, r26
    2e6c:	cf 01       	movw	r24, r30
    2e6e:	08 95       	ret

00002e70 <__prologue_saves__>:
    2e70:	2f 92       	push	r2
    2e72:	3f 92       	push	r3
    2e74:	4f 92       	push	r4
    2e76:	5f 92       	push	r5
    2e78:	6f 92       	push	r6
    2e7a:	7f 92       	push	r7
    2e7c:	8f 92       	push	r8
    2e7e:	9f 92       	push	r9
    2e80:	af 92       	push	r10
    2e82:	bf 92       	push	r11
    2e84:	cf 92       	push	r12
    2e86:	df 92       	push	r13
    2e88:	ef 92       	push	r14
    2e8a:	ff 92       	push	r15
    2e8c:	0f 93       	push	r16
    2e8e:	1f 93       	push	r17
    2e90:	cf 93       	push	r28
    2e92:	df 93       	push	r29
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	ca 1b       	sub	r28, r26
    2e9a:	db 0b       	sbc	r29, r27
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	09 94       	ijmp

00002ea8 <__epilogue_restores__>:
    2ea8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eaa:	39 88       	ldd	r3, Y+17	; 0x11
    2eac:	48 88       	ldd	r4, Y+16	; 0x10
    2eae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eba:	b9 84       	ldd	r11, Y+9	; 0x09
    2ebc:	c8 84       	ldd	r12, Y+8	; 0x08
    2ebe:	df 80       	ldd	r13, Y+7	; 0x07
    2ec0:	ee 80       	ldd	r14, Y+6	; 0x06
    2ec2:	fd 80       	ldd	r15, Y+5	; 0x05
    2ec4:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec6:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec8:	aa 81       	ldd	r26, Y+2	; 0x02
    2eca:	b9 81       	ldd	r27, Y+1	; 0x01
    2ecc:	ce 0f       	add	r28, r30
    2ece:	d1 1d       	adc	r29, r1
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	ed 01       	movw	r28, r26
    2edc:	08 95       	ret

00002ede <_exit>:
    2ede:	f8 94       	cli

00002ee0 <__stop_program>:
    2ee0:	ff cf       	rjmp	.-2      	; 0x2ee0 <__stop_program>
